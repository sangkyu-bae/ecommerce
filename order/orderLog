2023-12-24 16:12:20.184 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 10600 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 16:12:20.199 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 16:12:20.333 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 16:12:20.334 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 16:12:22.449 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 16:12:22.451 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 16:12:22.558 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 16:12:22.705 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 238 ms. Found 0 JDBC repository interfaces.
2023-12-24 16:12:22.737 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 16:12:22.739 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 16:12:22.878 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 127 ms. Found 1 JPA repository interfaces.
2023-12-24 16:12:23.694 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 16:12:27.756 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 16:12:27.778 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 16:12:27.779 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 16:12:27.873 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 16:12:27.874 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 7540 ms
2023-12-24 16:12:27.922 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 16:12:28.549 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 16:12:28.564 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 16:12:28.762 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 16:12:28.939 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 16:12:29.507 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 16:12:29.821 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 16:12:31.606 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table association_value_entry (
       id bigint not null,
        association_key varchar(255) not null,
        association_value varchar(255),
        saga_id varchar(255) not null,
        saga_type varchar(255),
        primary key (id)
    ) engine=InnoDB
2023-12-24 16:12:31.799 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table dead_letter_entry (
       dead_letter_id varchar(255) not null,
        cause_message varchar(1023),
        cause_type varchar(255),
        diagnostics longblob,
        enqueued_at datetime(6) not null,
        last_touched datetime(6),
        aggregate_identifier varchar(255),
        event_identifier varchar(255) not null,
        message_type varchar(255) not null,
        meta_data longblob,
        payload longblob not null,
        payload_revision varchar(255),
        payload_type varchar(255) not null,
        sequence_number bigint,
        time_stamp varchar(255) not null,
        token longblob,
        token_type varchar(255),
        type varchar(255),
        processing_group varchar(255) not null,
        processing_started datetime(6),
        sequence_identifier varchar(255) not null,
        sequence_index bigint not null,
        primary key (dead_letter_id)
    ) engine=InnoDB
2023-12-24 16:12:31.841 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table domain_event_entry (
       global_index bigint not null,
        event_identifier varchar(255) not null,
        meta_data longblob,
        payload longblob not null,
        payload_revision varchar(255),
        payload_type varchar(255) not null,
        time_stamp varchar(255) not null,
        aggregate_identifier varchar(255) not null,
        sequence_number bigint not null,
        type varchar(255),
        primary key (global_index)
    ) engine=InnoDB
2023-12-24 16:12:31.882 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table hibernate_sequence (
       next_val bigint
    ) engine=InnoDB
2023-12-24 16:12:31.901 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    insert into hibernate_sequence values ( 1 )
2023-12-24 16:12:31.910 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table saga_entry (
       saga_id varchar(255) not null,
        revision varchar(255),
        saga_type varchar(255),
        serialized_saga longblob,
        primary key (saga_id)
    ) engine=InnoDB
2023-12-24 16:12:31.942 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table snapshot_event_entry (
       aggregate_identifier varchar(255) not null,
        sequence_number bigint not null,
        type varchar(255) not null,
        event_identifier varchar(255) not null,
        meta_data longblob,
        payload longblob not null,
        payload_revision varchar(255),
        payload_type varchar(255) not null,
        time_stamp varchar(255) not null,
        primary key (aggregate_identifier, sequence_number, type)
    ) engine=InnoDB
2023-12-24 16:12:31.963 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table tb_order (
       id bigint not null,
        address varchar(255),
        amount integer not null,
        color_id bigint not null,
        create_at date,
        payment integer not null,
        product_id bigint not null,
        size_id bigint not null,
        status integer not null,
        update_at date,
        user_id bigint not null,
        primary key (id)
    ) engine=InnoDB
2023-12-24 16:12:31.985 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    create table token_entry (
       processor_name varchar(255) not null,
        segment integer not null,
        owner varchar(255),
        timestamp varchar(255) not null,
        token longblob,
        token_type varchar(255),
        primary key (processor_name, segment)
    ) engine=InnoDB
2023-12-24 16:12:32.004 DEBUG ---- [tartedMain] [SQL:144] logStatement   create index IDXk45eqnxkgd8hpdn6xixn8sgft on association_value_entry (saga_type, association_key, association_value)
2023-12-24 16:12:32.301 DEBUG ---- [tartedMain] [SQL:144] logStatement   create index IDXgv5k1v2mh6frxuy5c0hgbau94 on association_value_entry (saga_id, saga_type)
2023-12-24 16:12:32.316 DEBUG ---- [tartedMain] [SQL:144] logStatement   create index IDXe67wcx5fiq9hl4y4qkhlcj9cg on dead_letter_entry (processing_group)
2023-12-24 16:12:32.348 DEBUG ---- [tartedMain] [SQL:144] logStatement   create index IDXrwucpgs6sn93ldgoeh2q9k6bn on dead_letter_entry (processing_group, sequence_identifier)
2023-12-24 16:12:32.369 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table dead_letter_entry 
       drop index UKhlr8io86j74qy298xf720n16v
2023-12-24 16:12:32.386 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table dead_letter_entry 
       add constraint UKhlr8io86j74qy298xf720n16v unique (processing_group, sequence_identifier, sequence_index)
2023-12-24 16:12:32.402 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table domain_event_entry 
       drop index UK8s1f994p4la2ipb13me2xqm1w
2023-12-24 16:12:32.406 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table domain_event_entry 
       add constraint UK8s1f994p4la2ipb13me2xqm1w unique (aggregate_identifier, sequence_number)
2023-12-24 16:12:32.422 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table domain_event_entry 
       drop index UK_fwe6lsa8bfo6hyas6ud3m8c7x
2023-12-24 16:12:32.424 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table domain_event_entry 
       add constraint UK_fwe6lsa8bfo6hyas6ud3m8c7x unique (event_identifier)
2023-12-24 16:12:32.439 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table snapshot_event_entry 
       drop index UK_e1uucjseo68gopmnd0vgdl44h
2023-12-24 16:12:32.444 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    
    alter table snapshot_event_entry 
       add constraint UK_e1uucjseo68gopmnd0vgdl44h unique (event_identifier)
2023-12-24 16:12:32.457 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 16:12:32.479 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 16:12:33.310 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 16:12:33.419 INFO  ---- [tartedMain] [OptionalLiveReloadServer:59] startServer   LiveReload server is running on port 35729
2023-12-24 16:12:33.498 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 16:12:33.723 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 16:12:33.929 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 16:12:33.929 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 16:12:33.930 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 16:12:33.930 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 16:12:33.931 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 16:12:33.942 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 16:12:33.943 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 16:12:33.945 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 16:12:33.946 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 16:12:34.129 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 16:12:37.651 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 16:12:39.003 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 16:12:39.097 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 16:12:39.189 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 16:12:39.195 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:12:39.220 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 16:12:39.221 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 16:12:39.221 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 16:12:39.222 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 16:12:39.222 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 16:12:39.222 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 16:12:39.222 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 16:12:39.617 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 16:12:39.622 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 16:12:39.627 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 16:12:39.640 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703401959636 with initial instances count: 1
2023-12-24 16:12:39.644 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 16:12:39.645 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703401959645, current=UP, previous=STARTING]
2023-12-24 16:12:39.648 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 16:12:39.693 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 16:12:39.725 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 16:12:39.803 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 16:12:39.803 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 16:12:39.804 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703401959801
2023-12-24 16:12:39.812 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 16:12:39.838 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 16:12:39.854 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 16:12:39.856 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 16:12:39.857 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703401959854
2023-12-24 16:12:39.858 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 16:12:39.889 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 16:12:39.891 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 16:12:40.354 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 16:12:40.354 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 16:12:40.358 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 16:12:40.358 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 16:12:40.361 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 16:12:40.361 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 16:12:40.365 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 16:12:40.365 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 16:12:40.513 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 16:12:40.514 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 16:12:40.629 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 16:12:40.630 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 16:12:41.977 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 16:12:43.482 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 16:12:43.505 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 16:12:43.551 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 16:12:43.561 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 16:12:43.598 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=35, memberId='consumer-rollback-remove-order.v1-2-ee391c63-c3a4-40dd-81a9-943e7fb1f4e1', protocol='range'}
2023-12-24 16:12:43.602 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 35: {consumer-rollback-remove-order.v1-2-ee391c63-c3a4-40dd-81a9-943e7fb1f4e1=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 16:12:43.630 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:12:43.630 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 16:12:43.765 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=31, memberId='consumer-order-topic.v1-1-7bd848ec-f28a-4bd9-ba17-1a36d0a94160', protocol='range'}
2023-12-24 16:12:43.768 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 31: {consumer-order-topic.v1-1-7bd848ec-f28a-4bd9-ba17-1a36d0a94160=Assignment(partitions=[order-topic-0])}
2023-12-24 16:12:43.808 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    /* insert org.axonframework.eventhandling.tokenstore.jpa.TokenEntry
        */ insert 
        into
            token_entry
            (owner, timestamp, token, token_type, processor_name, segment) 
        values
            (?, ?, ?, ?, ?, ?)
2023-12-24 16:12:43.827 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=35, memberId='consumer-rollback-remove-order.v1-2-ee391c63-c3a4-40dd-81a9-943e7fb1f4e1', protocol='range'}
2023-12-24 16:12:43.828 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 16:12:43.835 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 16:12:43.879 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:12:43.882 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.eventhandling.tokenstore.jpa.TokenEntry
        */ insert 
        into
            token_entry
            (owner, timestamp, token, token_type, processor_name, segment) 
        values
            (?, ?, ?, ?, ?, ?)
2023-12-24 16:12:43.890 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:12:43.899 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 26.003 seconds (JVM running for 27.246)
2023-12-24 16:12:43.910 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:12:43.916 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:12:43.918 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 16:12:43.924 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:12:43.935 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 16:12:43.939 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:12:43.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:12:43.948 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: null for segment: Segment[0/0]
2023-12-24 16:12:44.019 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 16:12:44.020 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 16:12:44.127 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=31, memberId='consumer-order-topic.v1-1-7bd848ec-f28a-4bd9-ba17-1a36d0a94160', protocol='range'}
2023-12-24 16:12:44.129 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 16:12:44.129 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 16:12:44.257 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 16:12:44.258 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 16:12:44.999 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:46.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:47.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:48.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:49.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:50.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:51.140 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:52.154 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:53.195 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:54.200 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:55.213 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:56.217 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:57.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:58.230 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:12:59.243 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:00.266 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:01.284 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:02.294 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:03.315 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:04.329 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:05.369 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:06.380 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:07.396 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:08.417 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:09.436 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:10.449 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:11.472 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:12.495 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:13.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:14.545 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:15.562 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:16.593 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:17.615 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:18.630 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:19.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:20.660 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:21.679 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:22.697 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:23.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:24.717 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:25.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:26.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:27.775 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:28.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:29.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:30.857 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:31.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:32.882 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:33.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:34.907 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:35.919 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:36.930 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:37.952 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:38.982 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:39.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:41.017 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:42.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:43.056 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:44.068 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:45.094 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:46.108 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:47.125 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:48.141 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:49.153 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:50.166 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:51.174 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:52.190 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:53.212 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:54.283 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:55.299 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:56.310 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:57.323 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:58.342 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:13:59.360 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:00.371 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:01.384 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:02.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:03.422 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:04.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:05.456 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:06.467 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:07.477 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:08.490 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:09.502 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:10.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:11.555 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:12.566 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:13.578 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:14.606 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:15.635 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:16.665 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:17.691 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:18.719 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:19.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:20.738 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:21.748 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:22.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:23.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:24.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:25.801 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:26.818 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:27.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:28.853 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:29.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:30.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 16:14:31.903 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:32.911 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:33.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:34.938 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:35.952 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:36.982 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:37.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:39.007 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:40.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:41.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:42.041 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:43.071 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:44.078 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:45.110 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:46.119 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:47.133 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:48.140 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:49.154 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:50.175 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:51.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:52.191 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:53.204 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:54.220 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:55.229 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:56.256 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:57.263 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:58.273 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:14:59.288 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:00.295 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:01.307 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:02.336 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:03.345 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:04.360 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:05.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:06.386 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:07.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:08.432 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:09.458 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:10.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:11.498 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:12.513 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:13.525 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:14.546 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:15.552 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:16.566 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:17.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:18.607 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:19.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:20.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:21.658 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:22.685 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:23.700 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:24.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:25.742 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:26.786 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:27.795 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:28.811 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:29.826 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:30.842 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:31.861 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:32.869 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:33.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:34.889 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:35.921 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:36.932 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:37.945 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:38.961 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:39.978 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:40.993 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:42.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:43.051 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:44.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:45.093 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:46.104 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:47.118 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:48.149 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:49.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:50.194 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:51.209 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:52.223 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:53.238 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:54.254 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:55.275 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:56.305 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:57.333 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:58.345 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:15:59.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:00.390 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:01.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:02.416 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:03.440 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:04.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:05.470 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:06.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:07.501 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:08.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:09.558 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:10.572 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:11.616 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:12.624 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:13.663 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:14.676 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:15.687 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:16.728 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:17.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:18.803 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:19.817 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:20.851 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:21.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:22.879 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:23.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:24.905 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:25.921 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:26.933 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:27.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:28.960 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:29.969 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:30.977 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:31.989 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:33.004 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:34.015 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:35.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:36.047 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:37.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:38.084 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:39.125 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:40.171 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:41.195 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:42.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:43.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:44.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:45.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:46.303 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:47.331 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:48.346 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:49.361 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:50.392 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:51.399 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:52.413 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:53.428 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:54.454 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:55.459 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:56.483 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:57.493 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:58.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:16:59.549 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:00.579 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:01.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:02.615 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:03.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:04.646 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:05.667 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:06.685 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:07.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:08.725 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:09.743 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:10.759 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:11.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:12.802 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:13.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:14.812 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:15.824 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:16.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:17.867 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:18.884 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:19.912 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:20.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:21.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:22.955 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:23.971 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:24.986 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:25.993 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:27.017 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:28.034 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:29.049 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:30.066 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:31.098 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:32.206 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:33.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:34.250 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:35.268 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:36.314 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:37.356 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:38.375 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:39.232 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:17:39.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:40.423 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:41.429 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:42.441 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:43.450 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:44.474 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:45.490 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:46.504 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:47.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:48.544 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:49.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:50.568 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:51.578 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:52.615 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:53.636 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:54.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:55.666 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:56.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:57.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:58.773 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:17:59.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:00.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:01.842 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:02.866 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:03.895 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:04.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:05.939 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:06.955 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:07.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:08.976 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:09.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:11.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:12.025 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:13.035 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:14.052 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:15.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:16.092 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:17.119 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:18.149 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:19.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:20.245 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:21.267 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:22.288 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:23.296 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:24.325 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:25.354 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:26.380 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:27.409 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:28.437 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:29.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:30.582 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:31.597 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:32.622 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:33.636 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:34.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:35.666 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:36.688 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:37.711 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:38.741 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:39.757 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:40.784 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:41.801 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:42.818 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:43.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:44.847 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:45.862 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:46.876 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:47.909 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:48.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:49.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:50.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:51.994 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:53.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:54.054 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:55.071 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:56.092 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:57.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:58.141 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:18:59.156 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:00.177 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:01.192 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:02.220 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:03.246 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:04.262 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:05.294 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:06.306 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:07.332 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:08.357 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:09.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:10.390 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:11.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:12.422 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:13.431 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:14.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:15.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:16.466 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:17.475 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:18.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:19.494 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:20.506 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:21.513 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:22.521 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:23.534 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:24.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:25.559 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:26.574 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:27.588 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:28.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:29.610 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:30.625 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:31.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:32.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:33.661 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:34.672 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:35.679 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:36.691 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:37.704 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:38.717 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:39.728 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:40.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:41.755 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:42.762 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:43.773 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:44.783 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:45.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:46.810 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:47.822 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:48.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:49.847 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:50.862 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:51.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:52.888 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:53.901 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:54.914 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:55.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:56.927 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:57.940 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:58.957 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:19:59.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:00.980 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:01.995 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:03.022 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:04.039 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:05.049 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:06.076 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:07.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:08.127 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:09.145 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:10.172 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:11.186 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:12.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:13.222 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:14.245 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:15.270 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:16.295 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:17.313 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:18.338 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:19.355 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:20.372 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:21.391 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:22.427 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:23.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:24.472 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:25.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:26.496 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:27.514 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:28.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:29.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:30.547 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:31.563 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:32.592 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:33.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:34.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:35.675 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:36.704 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:37.726 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:38.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:39.754 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:40.780 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:41.806 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:42.827 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:43.850 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:44.870 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:45.893 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:46.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:47.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:48.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:49.975 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:50.989 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:52.003 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:53.014 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:54.027 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:55.038 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:56.065 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:57.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:58.117 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:20:59.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:00.157 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:01.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:02.202 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:03.216 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:04.227 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:05.239 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:06.254 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:07.272 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:08.285 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:09.290 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:10.315 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:11.340 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:12.347 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:13.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:14.368 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:15.395 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:16.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:17.418 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:18.441 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:19.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:20.478 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:21.487 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:22.502 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:23.528 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:24.558 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:25.572 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:26.589 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:27.615 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:28.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:29.655 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:30.658 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:31.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:32.693 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:33.702 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:34.714 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:35.730 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:36.742 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:37.755 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:38.768 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:39.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:40.696 INFO  ---- [er#1-0-C-1] [NetworkClient:935] handleDisconnections   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Node -1 disconnected.
2023-12-24 16:21:40.696 INFO  ---- [er#0-0-C-1] [NetworkClient:935] handleDisconnections   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Node -1 disconnected.
2023-12-24 16:21:40.791 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:41.805 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:42.817 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:43.830 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:44.848 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:45.857 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:46.874 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:47.886 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:48.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:49.909 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:50.927 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:51.939 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:52.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:53.966 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:54.982 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:56.011 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:57.022 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:58.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:21:59.064 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:00.082 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:01.089 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:02.097 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:03.117 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:04.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:05.146 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:06.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:07.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:08.194 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:09.208 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:10.224 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:11.238 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:12.255 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:13.271 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:14.293 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:15.303 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:16.317 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:17.333 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:18.350 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:19.363 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:20.381 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:21.394 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:22.409 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:23.420 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:24.437 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:25.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:26.471 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:27.490 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:28.504 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:29.526 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:30.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:31.549 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:32.558 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:33.570 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:34.581 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:35.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:36.598 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:37.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:38.649 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:39.246 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:22:39.678 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:40.694 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:41.721 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:42.750 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:43.822 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:44.831 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:45.846 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:46.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:47.881 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:48.907 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:49.937 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:50.949 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:51.953 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:52.966 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:53.980 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:55.004 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:56.024 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:57.035 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:58.050 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:22:59.062 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:00.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:01.111 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:02.125 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:03.147 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:04.165 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:05.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:06.197 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:07.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:08.240 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:09.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:10.264 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:11.289 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:12.321 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:13.331 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:14.365 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:15.392 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:16.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:17.412 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:18.439 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:19.446 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:20.460 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:21.488 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:22.503 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:23.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:24.531 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:25.544 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:26.570 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:27.582 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:28.609 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:29.633 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:30.660 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:31.683 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:32.707 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:33.734 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:34.745 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:35.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:36.769 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:37.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:38.794 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:39.806 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:40.820 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:41.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:42.849 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:43.856 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:44.863 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:45.875 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:46.886 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:47.895 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:48.910 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:49.921 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:50.933 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:51.947 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:52.959 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:53.975 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:54.988 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:55.998 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:57.010 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:58.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:23:59.040 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:00.057 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:01.075 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:02.104 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:03.114 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:04.132 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:05.149 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:06.164 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:07.179 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:08.192 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:09.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:10.239 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:11.267 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:12.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:13.292 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:14.301 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:15.320 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:16.339 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:17.357 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:18.370 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:19.387 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:20.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:21.421 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:22.435 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:23.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:24.481 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:25.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:26.512 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:27.526 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:28.552 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:29.576 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:30.592 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:31.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:32.617 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:33.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:34.672 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:35.696 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:36.711 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:37.734 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:38.749 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:39.762 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:40.778 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:41.791 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:42.805 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:43.829 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:44.842 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:45.866 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:46.890 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:47.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:48.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:49.960 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:50.986 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:52.000 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:53.021 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:54.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:55.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:55.275 INFO  ---- [-MNMB87E-1] [AxonServerManagedChannel:298] ensureConnected   Connection to AxonServer lost. Attempting to reconnect...
2023-12-24 16:24:55.281 INFO  ---- [-MNMB87E-1] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 16:24:55.303 WARN  ---- [-MNMB87E-1] [AxonServerManagedChannel:146] connectChannel   Connecting to AxonServer node [127.0.0.1:8124] failed.
io.grpc.StatusRuntimeException: UNAVAILABLE: Network closed for unknown reason
	at io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:271)
	at io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:252)
	at io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:165)
	at io.axoniq.axonserver.grpc.control.PlatformServiceGrpc$PlatformServiceBlockingStub.getPlatformServer(PlatformServiceGrpc.java:250)
	at io.axoniq.axonserver.connector.impl.AxonServerManagedChannel.connectChannel(AxonServerManagedChannel.java:115)
	at io.axoniq.axonserver.connector.impl.AxonServerManagedChannel.createConnection(AxonServerManagedChannel.java:335)
	at io.axoniq.axonserver.connector.impl.AxonServerManagedChannel.ensureConnected(AxonServerManagedChannel.java:300)
	at io.axoniq.axonserver.connector.impl.AxonServerManagedChannel.lambda$scheduleConnectionCheck$4(AxonServerManagedChannel.java:378)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2023-12-24 16:24:55.303 INFO  ---- [-MNMB87E-1] [AxonServerManagedChannel:358] createConnection   Failed to get connection to AxonServer. Scheduling a reconnect in 2000ms
2023-12-24 16:24:56.057 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:24:56.202 WARN  ---- [ocessor]-0] [TrackingEventProcessor:334] processingLoop   Error occurred. Starting retry mode.
org.axonframework.axonserver.connector.AxonServerException: The Event Stream has been closed, so no further events can be retrieved
	at org.axonframework.axonserver.connector.event.axon.EventBuffer.peekNullable(EventBuffer.java:178)
	at org.axonframework.axonserver.connector.event.axon.EventBuffer.hasNextAvailable(EventBuffer.java:144)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:418)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
2023-12-24 16:24:56.202 WARN  ---- [ocessor]-0] [TrackingEventProcessor:336] processingLoop   Releasing claim on token and preparing for retry in 1s
2023-12-24 16:24:56.206 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.owner = null 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            owner=null 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 16:24:56.209 INFO  ---- [ocessor]-0] [TrackingEventProcessor:373] releaseToken   Released claim
2023-12-24 16:24:57.214 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:24:57.230 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:24:57.235 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=0} for segment: Segment[0/0]
2023-12-24 16:24:57.237 WARN  ---- [ocessor]-0] [TrackingEventProcessor:336] processingLoop   Releasing claim on token and preparing for retry in 2s
2023-12-24 16:24:57.238 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.owner = null 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            owner=null 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 16:24:57.241 INFO  ---- [ocessor]-0] [TrackingEventProcessor:373] releaseToken   Released claim
2023-12-24 16:24:57.283 INFO  ---- [-MNMB87E-0] [AxonServerManagedChannel:298] ensureConnected   Connection to AxonServer lost. Attempting to reconnect...
2023-12-24 16:24:57.285 INFO  ---- [-MNMB87E-0] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 16:26:16.092 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 15136 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 16:26:16.099 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 16:26:16.257 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 16:26:16.257 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 16:26:18.093 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 16:26:18.095 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 16:26:18.154 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 16:26:18.190 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 90 ms. Found 0 JDBC repository interfaces.
2023-12-24 16:26:18.200 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 16:26:18.200 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 16:26:18.323 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 115 ms. Found 1 JPA repository interfaces.
2023-12-24 16:26:18.738 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 16:26:22.176 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 16:26:22.193 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 16:26:22.194 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 16:26:22.305 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 16:26:22.307 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 6048 ms
2023-12-24 16:26:22.367 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 16:26:22.891 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 16:26:22.912 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 16:26:23.241 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 16:26:23.360 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 16:26:23.781 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 16:26:24.102 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 16:26:26.146 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 16:26:26.171 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 16:26:27.118 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 16:26:27.213 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 16:26:27.313 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 16:26:27.661 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 16:26:28.030 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 16:26:28.031 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 16:26:28.032 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 16:26:28.033 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 16:26:28.036 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 16:26:28.080 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 16:26:28.103 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 16:26:28.111 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 16:26:28.115 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 16:26:28.448 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 16:26:32.001 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 16:26:33.029 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 16:26:33.131 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 16:26:33.203 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 16:26:33.208 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:26:33.236 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 16:26:33.236 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 16:26:33.237 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 16:26:33.237 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 16:26:33.237 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 16:26:33.237 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 16:26:33.238 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 16:26:33.578 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 16:26:33.581 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 16:26:33.587 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 16:26:33.594 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703402793593 with initial instances count: 6
2023-12-24 16:26:33.597 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 16:26:33.599 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703402793599, current=UP, previous=STARTING]
2023-12-24 16:26:33.601 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 16:26:33.641 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 16:26:33.656 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 16:26:33.737 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 16:26:33.738 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 16:26:33.738 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703402793736
2023-12-24 16:26:33.741 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 16:26:33.755 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 16:26:33.762 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 16:26:33.763 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 16:26:33.763 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703402793762
2023-12-24 16:26:33.763 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 16:26:33.779 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 16:26:33.781 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 16:26:34.090 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 16:26:34.090 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 16:26:34.093 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 16:26:34.093 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 16:26:34.095 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 16:26:34.095 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 16:26:34.099 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 16:26:34.099 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 16:26:34.119 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 16:26:34.119 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 16:26:34.119 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 16:26:34.119 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 16:26:35.042 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 16:26:35.888 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 16:26:35.903 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 16:26:35.922 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 16:26:35.924 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 16:26:35.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:26:35.956 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 16:26:35.978 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:26:36.014 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:26:36.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:26:36.025 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 16:26:36.048 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:26:36.058 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 22.309 seconds (JVM running for 23.402)
2023-12-24 16:26:36.063 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 16:26:36.065 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:26:36.069 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:26:36.073 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=0} for segment: Segment[0/0]
2023-12-24 16:26:37.124 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=37, memberId='consumer-rollback-remove-order.v1-2-6b474138-db50-44bf-afb4-9629d32d4616', protocol='range'}
2023-12-24 16:26:37.124 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=33, memberId='consumer-order-topic.v1-1-4c772836-7110-4a0e-9848-0d954d349dd1', protocol='range'}
2023-12-24 16:26:37.127 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 37: {consumer-rollback-remove-order.v1-2-6b474138-db50-44bf-afb4-9629d32d4616=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 16:26:37.127 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 33: {consumer-order-topic.v1-1-4c772836-7110-4a0e-9848-0d954d349dd1=Assignment(partitions=[order-topic-0])}
2023-12-24 16:26:37.137 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=33, memberId='consumer-order-topic.v1-1-4c772836-7110-4a0e-9848-0d954d349dd1', protocol='range'}
2023-12-24 16:26:37.138 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 16:26:37.140 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=37, memberId='consumer-rollback-remove-order.v1-2-6b474138-db50-44bf-afb4-9629d32d4616', protocol='range'}
2023-12-24 16:26:37.140 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 16:26:37.141 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 16:26:37.141 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 16:26:37.141 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:37.156 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 16:26:37.156 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 16:26:37.156 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 16:26:37.156 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 16:26:38.156 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:39.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:40.189 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:41.218 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:42.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:43.244 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:44.259 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:45.277 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:46.289 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:47.305 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:48.319 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:49.338 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:50.364 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:51.379 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:52.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:53.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:54.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:55.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:56.484 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:57.499 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:58.539 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:26:59.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:00.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:01.606 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:02.638 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:03.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:04.664 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:05.691 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:06.707 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:07.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:08.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:09.760 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:10.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:11.798 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:12.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:13.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:14.871 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:15.880 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:16.891 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:17.906 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:18.914 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:19.926 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:20.937 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:21.946 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:22.974 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:23.987 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:24.999 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:26.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:27.028 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:28.052 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:29.062 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:30.073 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:31.100 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:32.110 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:33.124 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:34.137 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:35.164 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:36.194 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:37.221 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:38.241 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:39.256 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:40.281 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:41.293 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:42.308 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:43.316 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:44.340 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:45.368 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:46.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:47.391 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:48.420 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:49.433 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:50.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:51.465 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:52.476 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:53.504 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:27:54.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:15.492 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 25616 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 16:28:15.494 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 16:28:15.579 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 16:28:15.579 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 16:28:17.011 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 16:28:17.012 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 16:28:17.069 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 16:28:17.103 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 85 ms. Found 0 JDBC repository interfaces.
2023-12-24 16:28:17.114 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 16:28:17.114 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 16:28:17.211 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 90 ms. Found 1 JPA repository interfaces.
2023-12-24 16:28:17.691 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 16:28:19.955 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 16:28:19.973 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 16:28:19.974 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 16:28:20.046 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 16:28:20.047 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 4467 ms
2023-12-24 16:28:20.086 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 16:28:20.516 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 16:28:20.532 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 16:28:20.824 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 16:28:20.962 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 16:28:21.240 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 16:28:21.504 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 16:28:23.241 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 16:28:23.268 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 16:28:24.450 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 16:28:24.642 INFO  ---- [tartedMain] [OptionalLiveReloadServer:59] startServer   LiveReload server is running on port 35729
2023-12-24 16:28:24.777 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 16:28:25.122 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 16:28:25.481 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 16:28:25.482 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 16:28:25.484 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 16:28:25.484 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 16:28:25.485 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 16:28:25.514 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 16:28:25.516 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 16:28:25.519 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 16:28:25.521 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 16:28:25.798 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 16:28:29.299 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 16:28:31.056 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 16:28:31.183 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 16:28:31.308 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 16:28:31.317 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:28:31.354 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 16:28:31.355 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 16:28:31.356 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 16:28:31.356 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 16:28:31.356 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 16:28:31.356 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 16:28:31.357 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 16:28:31.786 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 16:28:31.791 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 16:28:31.794 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 16:28:31.801 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703402911799 with initial instances count: 6
2023-12-24 16:28:31.805 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 16:28:31.805 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703402911805, current=UP, previous=STARTING]
2023-12-24 16:28:31.809 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 16:28:31.880 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 16:28:31.899 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 16:28:32.056 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 16:28:32.057 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 16:28:32.057 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703402912053
2023-12-24 16:28:32.064 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 16:28:32.085 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 16:28:32.092 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 16:28:32.093 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 16:28:32.094 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703402912092
2023-12-24 16:28:32.094 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 16:28:32.116 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 16:28:32.118 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 16:28:32.564 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 16:28:32.564 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 16:28:32.567 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 16:28:32.567 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 16:28:32.570 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 16:28:32.570 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 16:28:32.574 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 16:28:32.574 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 16:28:32.599 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 16:28:32.599 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 16:28:32.599 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 16:28:32.599 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 16:28:34.137 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 16:28:36.093 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 16:28:36.123 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 16:28:36.145 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 16:28:36.151 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 16:28:36.215 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:28:36.215 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 16:28:36.239 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 16:28:36.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:28:36.283 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:28:36.288 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 16:28:36.307 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 22.861 seconds (JVM running for 24.028)
2023-12-24 16:28:36.312 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:28:36.322 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 16:28:36.324 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 16:28:36.325 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 16:28:36.329 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=0} for segment: Segment[0/0]
2023-12-24 16:28:37.379 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:38.395 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:39.411 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:40.292 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=38, memberId='consumer-rollback-remove-order.v1-2-c9fe0d76-1dd5-44dd-a771-244a357723d7', protocol='range'}
2023-12-24 16:28:40.299 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 38: {consumer-rollback-remove-order.v1-2-c9fe0d76-1dd5-44dd-a771-244a357723d7=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 16:28:40.307 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=34, memberId='consumer-order-topic.v1-1-b9e2fd35-f37f-4940-8742-c9fbc6db90d1', protocol='range'}
2023-12-24 16:28:40.308 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 34: {consumer-order-topic.v1-1-b9e2fd35-f37f-4940-8742-c9fbc6db90d1=Assignment(partitions=[order-topic-0])}
2023-12-24 16:28:40.327 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=34, memberId='consumer-order-topic.v1-1-b9e2fd35-f37f-4940-8742-c9fbc6db90d1', protocol='range'}
2023-12-24 16:28:40.327 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=38, memberId='consumer-rollback-remove-order.v1-2-c9fe0d76-1dd5-44dd-a771-244a357723d7', protocol='range'}
2023-12-24 16:28:40.328 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 16:28:40.328 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 16:28:40.330 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 16:28:40.330 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 16:28:40.347 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 16:28:40.347 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 16:28:40.348 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 16:28:40.348 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 16:28:40.427 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:41.450 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:42.465 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:43.490 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:44.505 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:45.518 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:46.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:47.561 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:48.575 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:49.580 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:50.610 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:51.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:52.647 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:53.673 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:54.702 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:55.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:56.757 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:57.780 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:58.800 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:28:59.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:00.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:01.853 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:02.865 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:03.876 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:04.887 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:05.903 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:06.914 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:07.943 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:08.967 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:09.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:10.990 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:11.996 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:13.004 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:14.016 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:15.025 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:16.055 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:17.068 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:18.093 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:19.106 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:20.132 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:21.146 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:22.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:23.172 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:24.200 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:25.211 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:26.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:27.239 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:28.252 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:29.281 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:30.298 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:31.307 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:32.332 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:33.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:34.372 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:35.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:36.416 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:37.431 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:38.444 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:39.472 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:40.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:41.502 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:42.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:43.533 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:44.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:45.558 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:46.568 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:47.592 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:48.619 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:49.645 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:50.675 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:51.700 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:52.723 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:53.730 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:54.750 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:55.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:56.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:57.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:58.817 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:29:59.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:00.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:01.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:02.880 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:03.887 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:04.896 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:05.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:06.952 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:07.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:08.979 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:10.010 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:11.034 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:12.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:13.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:14.129 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 16:30:15.135 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:16.148 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:17.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:18.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:19.182 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:20.197 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:21.222 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:22.249 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:23.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:24.271 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:25.282 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:26.309 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:27.329 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:28.335 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:29.362 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:30.376 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:31.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:32.412 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:33.441 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:34.457 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:35.481 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:36.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:37.529 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:38.545 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:39.570 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:40.581 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:41.613 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:42.652 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:43.677 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:44.690 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:45.703 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:46.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:47.752 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:48.766 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:49.793 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:50.804 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:51.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:52.844 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:53.871 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:54.896 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:55.908 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:56.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:57.938 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:58.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:30:59.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:00.978 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:02.006 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:03.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:04.043 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:05.061 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:06.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:07.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:08.111 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:09.138 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:10.162 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:11.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:12.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:13.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:14.210 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:15.219 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:16.245 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:17.254 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:18.281 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:19.292 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:20.314 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:21.344 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:22.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:23.364 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:24.392 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:25.418 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:26.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:27.437 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:28.447 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:29.458 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:30.483 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:31.496 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:32.509 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:33.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:34.559 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:35.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:36.597 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:37.622 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:38.650 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:39.666 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:40.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:41.699 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:42.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:43.758 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:44.788 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:45.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:46.824 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:47.846 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:48.863 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:49.890 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:50.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:51.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:52.938 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:53.953 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:54.982 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:56.009 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:57.022 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:58.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:31:59.075 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:00.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:01.116 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:02.145 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:03.153 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:04.165 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:05.193 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:06.223 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:07.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:08.251 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:09.268 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:10.282 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:11.290 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:12.320 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:13.347 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:14.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:15.404 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:16.429 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:17.442 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:18.458 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:19.471 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:20.487 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:21.514 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:22.527 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:23.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:24.585 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:25.617 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:26.629 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:27.654 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:28.684 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:29.716 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:30.729 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:31.741 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:32.758 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:33.785 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:34.798 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:35.814 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:36.840 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:37.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:38.897 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:39.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:40.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:41.985 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:43.007 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:44.035 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:45.062 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:46.091 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:47.120 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:48.148 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:49.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:50.189 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:51.200 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:52.215 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:53.238 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:54.267 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:55.282 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:56.295 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:57.311 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:58.328 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:32:59.337 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:00.349 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:01.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:02.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:03.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:04.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:05.457 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:06.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:07.499 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:08.525 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:09.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:10.544 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:11.572 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:12.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:13.595 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:14.613 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:15.625 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:16.656 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:17.667 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:18.695 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:19.726 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:20.753 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:21.764 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:22.784 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:23.812 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:24.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:25.856 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:26.886 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:27.902 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:28.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:29.933 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:30.946 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:31.359 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:33:31.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:32.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:33.983 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:35.016 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:36.045 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:37.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:38.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:39.096 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:40.110 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:41.133 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:42.148 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:43.174 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:44.203 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:45.236 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:46.250 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:47.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:48.287 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:49.313 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:50.326 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:51.342 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:52.356 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:53.363 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:54.391 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:55.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:56.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:57.445 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:58.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:33:59.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:00.498 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:01.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:02.524 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:03.553 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:04.579 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:05.596 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:06.621 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:07.633 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:08.649 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:09.681 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:10.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:11.719 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:12.728 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:13.738 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:14.755 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:15.764 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:16.774 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:17.801 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:18.827 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:19.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:20.851 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:21.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:22.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:23.908 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:24.937 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:25.965 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:26.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:28.018 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:29.033 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:30.061 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:31.087 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:32.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:33.129 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:34.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:35.171 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:36.199 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:37.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:38.231 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:39.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:40.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:41.302 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:42.329 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:43.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:44.388 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:45.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:46.436 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:47.447 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:48.463 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:49.496 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:50.509 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:51.535 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:52.549 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:53.579 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:54.608 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:55.634 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:56.646 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:57.674 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:58.698 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:34:59.724 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:00.754 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:01.785 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:02.811 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:03.838 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:04.866 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:05.892 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:06.919 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:07.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:08.975 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:10.006 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:11.021 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:12.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:13.072 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:14.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:15.114 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:16.144 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:17.151 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:18.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:19.210 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:20.241 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:21.269 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:22.294 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:23.324 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:24.340 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:25.356 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:26.362 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:27.381 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:28.408 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:29.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:30.451 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:31.463 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:32.475 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:33.503 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:34.531 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:35.545 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:36.574 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:37.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:38.610 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:39.634 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:40.647 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:41.662 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:42.685 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:43.703 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:44.728 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:45.743 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:46.771 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:47.787 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:48.805 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:49.823 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:50.850 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:51.877 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:52.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:53.928 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:54.960 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:55.988 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:57.001 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:58.017 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:35:59.047 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:00.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:01.074 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:02.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:03.117 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:04.139 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:05.156 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:06.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:07.179 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:08.192 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:09.202 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:10.215 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:11.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:12.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:13.256 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:14.283 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:15.294 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:16.323 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:17.352 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:18.379 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:19.404 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:20.411 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:21.435 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:22.445 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:23.460 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:24.489 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:25.506 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:26.520 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:27.532 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:28.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:29.560 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:30.589 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:31.602 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:32.617 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:33.643 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:34.668 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:35.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:36.722 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:37.734 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:38.748 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:39.759 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:40.785 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:41.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:42.828 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:43.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:44.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:45.897 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:46.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:47.951 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:48.957 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:49.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:50.987 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:51.997 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:53.004 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:54.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:55.045 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:56.071 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:57.084 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:58.110 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:36:59.136 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:00.166 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:01.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:02.209 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:03.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:04.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:05.286 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:06.309 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:07.333 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:08.353 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:09.366 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:10.395 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:11.424 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:12.434 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:13.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:14.471 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:15.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:16.499 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:17.513 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:18.528 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:19.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:20.565 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:21.589 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:22.613 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:23.638 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:24.652 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:25.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:26.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:27.722 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:28.751 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:29.781 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:30.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:31.824 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:32.633 INFO  ---- [er#1-0-C-1] [NetworkClient:935] handleDisconnections   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Node -1 disconnected.
2023-12-24 16:37:32.666 INFO  ---- [er#0-0-C-1] [NetworkClient:935] handleDisconnections   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Node -1 disconnected.
2023-12-24 16:37:32.851 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:33.865 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:34.879 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:35.892 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:36.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:37.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:38.965 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:39.997 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:41.010 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:42.029 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:43.057 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:44.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:45.089 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:46.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:47.130 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:48.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:49.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:50.195 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:51.203 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:52.218 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:53.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:54.263 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:55.275 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:56.286 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:57.296 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:58.309 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:37:59.339 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:00.353 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:01.380 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:02.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:03.416 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:04.439 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:05.452 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:06.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:07.493 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:08.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:09.536 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:10.551 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:11.577 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:12.607 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:13.636 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:14.665 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:15.681 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:16.693 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:17.718 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:18.743 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:19.761 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:20.788 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:21.810 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:22.841 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:23.856 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:24.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:25.902 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:26.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:27.961 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:28.989 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:30.002 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:31.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:31.374 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:38:32.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:33.062 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:34.090 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:35.121 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:36.129 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:37.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:38.187 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:39.215 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:40.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:41.264 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:42.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:43.321 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:44.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:45.380 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:46.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:47.414 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:48.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:49.456 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:50.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:51.492 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:52.501 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:53.511 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:54.533 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:55.543 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:56.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:57.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:58.594 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:38:59.611 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:00.624 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:01.644 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:02.672 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:03.686 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:04.712 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:05.726 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:06.753 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:07.766 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:08.793 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:09.804 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:10.831 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:11.848 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:12.875 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:13.902 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:14.930 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:15.958 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:16.972 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:18.005 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:19.020 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:20.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:21.060 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:22.074 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:23.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:24.133 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:25.161 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:26.172 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:27.196 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:28.216 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:29.239 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:30.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:31.283 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:32.312 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:33.335 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:34.365 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:35.392 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:36.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:37.426 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:38.442 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:39.463 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:40.476 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:41.501 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:42.514 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:43.533 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:44.551 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:45.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:46.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:47.617 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:48.647 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:49.676 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:50.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:51.739 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:52.751 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:53.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:54.806 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:55.820 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:56.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:57.853 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:58.871 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:39:59.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:00.901 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:01.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:02.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:03.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:04.985 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:06.014 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:07.030 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:08.049 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:09.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:10.109 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:11.140 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:12.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:13.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:14.192 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:15.222 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:16.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:17.263 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:18.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:19.295 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:20.319 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:21.350 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:22.381 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:23.411 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:24.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:25.467 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:26.496 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:27.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:28.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:29.570 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:30.598 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:31.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:32.635 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:33.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:34.679 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:35.693 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:36.721 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:37.733 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:38.758 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:39.789 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:40.803 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:41.830 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:42.860 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:43.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:44.905 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:45.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:46.950 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:47.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:48.999 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:50.026 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:51.054 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:52.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:53.111 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:54.138 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:55.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:56.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:57.209 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:58.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:40:59.246 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:00.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:01.270 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:02.283 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:03.295 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:04.320 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:05.349 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:06.376 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:07.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:08.435 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:09.449 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:10.478 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:11.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:12.525 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:13.538 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:14.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:15.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:16.592 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:17.607 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:18.634 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:19.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:20.671 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:21.683 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:22.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:23.740 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:24.768 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:25.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:26.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:27.838 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:28.865 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:29.890 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:30.903 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:31.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:32.945 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:33.958 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:34.967 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:35.994 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:37.013 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:38.039 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:39.065 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:40.089 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:41.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:42.119 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:43.137 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:44.149 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:45.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:46.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:47.231 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:48.277 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:49.288 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:50.313 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:51.322 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:52.350 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:53.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:54.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:55.419 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:56.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:57.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:58.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:41:59.467 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:00.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:01.505 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:02.517 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:03.532 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:04.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:05.563 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:06.574 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:07.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:08.618 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:09.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:10.658 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:11.685 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:12.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:13.728 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:14.738 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:15.753 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:16.769 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:17.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:18.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:19.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:20.856 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:21.884 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:22.912 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:23.941 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:24.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:25.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:26.980 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:27.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:29.000 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:30.014 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:31.030 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:32.044 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:33.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:34.069 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:35.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:36.107 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:37.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:38.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:39.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:40.186 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:41.208 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:42.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:43.245 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:44.262 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:45.290 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:46.302 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:47.320 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:48.339 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:49.363 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:50.427 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:51.442 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:52.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:53.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:54.493 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:55.509 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:56.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:57.538 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:58.562 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:42:59.589 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:00.616 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:01.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:02.645 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:03.662 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:04.682 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:05.693 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:06.707 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:07.729 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:08.737 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:09.756 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:10.767 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:11.776 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:12.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:13.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:14.850 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:15.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:16.893 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:17.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:18.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:19.977 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:20.993 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:22.008 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:23.027 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:24.055 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:25.085 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:26.101 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:27.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:28.132 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:29.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:30.175 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:31.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:31.383 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 16:43:32.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:33.243 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:34.254 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:35.271 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:36.301 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:37.328 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:38.355 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:39.384 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:40.400 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:41.428 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:42.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:43.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:44.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:45.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:46.506 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:47.521 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:48.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:49.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:50.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:51.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:52.612 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:53.622 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 16:43:54.639 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:55.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:56.659 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:57.693 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:58.700 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:43:59.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:00.734 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:01.740 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:02.751 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:03.768 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:04.783 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:05.810 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:06.832 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:07.856 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:08.873 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:09.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:10.907 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:11.921 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:12.939 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:13.967 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:14.995 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:16.009 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:17.020 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:18.047 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:19.061 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:20.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:21.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 16:44:22.116 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:04.291 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 21856 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:13:04.294 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:13:04.404 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:13:04.404 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:13:06.000 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:13:06.003 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:13:06.081 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:13:06.138 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 125 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:13:06.153 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:13:06.154 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:13:06.274 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 110 ms. Found 1 JPA repository interfaces.
2023-12-24 17:13:06.672 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:13:08.434 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:13:08.444 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:13:08.445 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:13:08.495 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:13:08.496 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 4091 ms
2023-12-24 17:13:08.524 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:13:08.812 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:13:08.821 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:13:08.951 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:13:09.008 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:13:09.193 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:13:09.342 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:13:10.618 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:13:10.650 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:13:11.800 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:13:11.951 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:13:12.055 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:13:12.305 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:13:12.529 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:13:12.530 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:13:12.531 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:13:12.533 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:13:12.533 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:13:12.549 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:13:12.552 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:13:12.555 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:13:12.559 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:13:12.758 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:13:16.372 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:13:18.022 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:13:18.167 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:13:18.338 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:13:18.344 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:13:18.376 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:13:18.376 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:13:18.377 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:13:18.377 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:13:18.377 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:13:18.377 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:13:18.378 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:13:18.855 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:13:18.865 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:13:18.872 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:13:18.884 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703405598882 with initial instances count: 4
2023-12-24 17:13:18.890 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:13:18.891 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703405598891, current=UP, previous=STARTING]
2023-12-24 17:13:18.895 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:13:18.946 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:13:18.963 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:13:19.107 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:13:19.108 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:13:19.108 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703405599103
2023-12-24 17:13:19.113 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:13:19.134 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:13:19.143 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:13:19.145 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:13:19.145 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703405599143
2023-12-24 17:13:19.146 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:13:19.166 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:13:19.169 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:13:19.649 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:13:19.649 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:13:19.652 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:13:19.652 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:13:19.654 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:13:19.654 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:13:19.660 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:13:19.660 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:13:19.686 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:13:19.687 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:13:19.706 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:13:19.707 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:13:21.379 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:13:22.703 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=40, memberId='consumer-rollback-remove-order.v1-2-c6fbb01c-7acc-469f-8773-490a891bb687', protocol='range'}
2023-12-24 17:13:22.709 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 40: {consumer-rollback-remove-order.v1-2-c6fbb01c-7acc-469f-8773-490a891bb687=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:13:22.726 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=40, memberId='consumer-rollback-remove-order.v1-2-c6fbb01c-7acc-469f-8773-490a891bb687', protocol='range'}
2023-12-24 17:13:22.727 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:13:22.730 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=36, memberId='consumer-order-topic.v1-1-d976dbad-9d6c-4942-a568-cd33f75fa85f', protocol='range'}
2023-12-24 17:13:22.731 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:13:22.731 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 36: {consumer-order-topic.v1-1-d976dbad-9d6c-4942-a568-cd33f75fa85f=Assignment(partitions=[order-topic-0])}
2023-12-24 17:13:22.751 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:13:22.753 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:13:22.761 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=36, memberId='consumer-order-topic.v1-1-d976dbad-9d6c-4942-a568-cd33f75fa85f', protocol='range'}
2023-12-24 17:13:22.761 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:13:22.762 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:13:22.777 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:13:22.777 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:13:23.089 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:13:23.132 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:13:23.153 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:13:23.155 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:13:23.190 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:13:23.192 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:13:23.218 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:13:23.253 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:13:23.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:13:23.269 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:13:23.299 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:13:23.301 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 20.591 seconds (JVM running for 21.24)
2023-12-24 17:13:23.308 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:13:23.311 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:13:23.316 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:13:23.320 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=2} for segment: Segment[0/0]
2023-12-24 17:13:24.365 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:25.385 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:26.412 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:27.423 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:28.450 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:29.475 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:30.488 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:31.512 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:32.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:33.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:34.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:35.577 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:36.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:37.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:38.607 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:39.622 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:40.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:41.654 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:42.667 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:43.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:44.721 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:45.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:46.755 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:47.770 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:48.788 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:49.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:50.831 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:51.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:52.873 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:53.888 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:54.905 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:55.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:56.947 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:57.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:58.975 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:13:59.987 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:00.999 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:02.009 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:03.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:04.027 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:05.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:06.051 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:07.067 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:08.099 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:09.120 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:10.146 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:11.161 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:12.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:13.200 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:14.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:15.250 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:16.044 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:14:16.045 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:14:16.047 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 2 ms
2023-12-24 17:14:16.077 WARN  ---- [084-exec-1] [DefaultHandlerExceptionResolver:208] logException   Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported]
2023-12-24 17:14:16.267 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:17.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:18.297 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:19.324 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:20.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:21.375 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:22.386 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:23.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:24.413 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:25.421 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:26.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:27.439 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:28.456 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:29.465 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:30.474 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:31.493 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:32.506 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:33.524 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:34.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:35.576 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:36.593 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:37.602 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:38.627 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:39.667 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:40.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:41.696 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:42.711 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:43.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:44.752 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:45.762 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:46.786 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:47.813 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:48.835 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:49.846 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:50.876 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:51.889 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:52.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:53.946 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:54.971 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:55.993 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:57.002 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:58.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:14:59.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:00.076 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:01.086 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:02.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:03.129 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:04.137 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:05.159 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:06.171 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:07.186 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:08.193 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:09.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:10.236 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:11.244 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:12.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:13.280 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:14.303 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:15.315 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:16.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:17.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:18.396 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:19.425 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:20.444 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:21.457 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:22.468 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:23.494 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:24.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:25.517 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:26.543 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:27.553 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:28.569 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:29.582 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:30.608 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:31.636 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:32.644 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:33.670 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:34.697 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:35.714 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:36.739 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:37.769 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:38.778 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:39.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:40.823 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:41.837 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:42.863 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:43.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:44.891 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:45.908 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:46.934 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:47.945 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:48.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:49.998 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:51.013 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:52.020 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:53.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:53.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:15:53.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:15:53.924 DEBUG ---- [executor-1] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:15:53.929 DEBUG ---- [executor-1] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:15:53.937 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:15:53.939 DEBUG ---- [executor-1] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:15:53.959 INFO  ---- [executor-1] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:15:53.974 INFO  ---- [executor-1] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:15:53.989 INFO  ---- [executor-1] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:15:53.989 INFO  ---- [executor-1] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:15:53.989 INFO  ---- [executor-1] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703405753989
2023-12-24 17:15:54.001 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:15:54.001 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:15:54.198 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [b87e9073-b0d8-42e1-a3bb-d0e65e292a92] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.FeignException$InternalServerError: [500] during [GET] to [http://auth-service/user/2] [MemberFeignClient#getMember(long)]: [{"timestamp":"2023-12-24T08:15:54.174+00:00","status":500,"error":"Internal Server Error","trace":"java.lang.IllegalStateException: Ambiguous handler methods mapped for '/user/2': {public org.springfr... (10440 bytes)]
	at feign.FeignException.serverErrorStatus(FeignException.java:250)
	at feign.FeignException.errorStatus(FeignException.java:197)
	at feign.FeignException.errorStatus(FeignException.java:185)
	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:92)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:98)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
2023-12-24 17:15:54.200 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:15:54.201 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:15:54.204 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:15:54.210 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:15:54.593 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10000 with epoch 0
2023-12-24 17:15:55.229 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:56.272 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:57.287 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:58.306 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:15:59.322 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:00.350 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:01.375 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:02.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:03.432 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:04.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:05.475 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:06.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:07.494 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:08.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:09.536 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:10.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:11.575 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:12.605 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:13.625 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:14.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:15.662 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:16.671 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:17.695 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:18.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:19.755 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:20.780 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:21.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:22.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:23.851 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:24.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:25.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:26.899 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:27.909 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:28.936 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:29.949 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:30.972 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:31.998 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:33.014 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:34.033 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:35.060 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:36.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:37.111 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:38.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:39.155 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:40.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:41.188 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:42.217 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:43.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:44.260 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:45.273 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:46.286 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:47.328 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:48.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:49.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:50.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:51.470 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:52.478 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:53.495 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:54.505 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:55.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:56.543 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:57.557 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:58.585 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:16:59.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:00.612 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:01.622 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:02.632 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:03.645 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:04.689 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:05.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:06.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:07.774 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:08.801 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:09.828 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:10.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:11.848 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:12.861 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:13.888 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:14.912 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:15.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:16.955 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:17.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:18.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:20.020 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:21.045 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:22.065 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:23.093 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:24.122 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:25.134 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:26.151 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:27.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:28.186 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:29.218 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:30.233 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:31.259 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:32.276 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:33.305 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:34.333 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:35.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:36.354 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:37.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:38.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:39.432 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:40.458 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:41.472 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:42.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:43.490 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:44.494 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:45.509 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:46.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:47.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:48.543 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:49.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:50.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:51.576 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:52.602 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:53.611 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:54.627 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:55.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:56.656 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:57.665 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:58.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:17:59.708 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:00.722 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:01.736 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:02.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:03.754 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:04.767 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:05.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:06.791 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:07.807 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:08.823 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:09.826 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:10.832 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:11.848 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:12.854 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:13.869 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:14.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:15.916 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:16.932 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:17.946 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:18.393 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:18:18.977 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:19.994 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:21.041 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:22.060 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:23.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:24.100 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:25.120 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:26.149 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:27.165 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:28.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:29.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:30.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:31.244 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:32.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:33.284 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:34.315 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:35.333 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:36.347 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:37.363 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:38.394 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:39.425 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:40.439 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:41.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:42.472 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:43.487 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:44.500 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:45.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:46.529 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:47.551 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:48.575 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:49.593 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:50.609 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:51.644 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:52.660 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:53.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:54.705 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:55.719 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:56.735 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:57.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:58.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:18:59.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:00.828 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:01.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:02.879 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:03.887 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:04.907 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:05.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:06.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:07.972 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:08.990 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:10.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:11.030 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:12.065 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:13.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:14.098 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:15.122 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:16.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:17.182 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:18.212 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:19.239 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:20.252 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:21.270 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:22.297 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:23.327 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:24.362 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:25.373 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:26.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:27.414 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:28.446 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:29.464 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:30.479 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:31.502 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:32.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:33.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:34.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:35.580 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:36.595 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:37.614 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:38.635 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:39.668 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:40.690 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:41.704 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:42.737 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:43.759 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:44.792 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:45.805 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:46.838 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:47.873 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:48.898 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:49.913 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:50.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:51.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:52.972 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:53.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:55.008 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:56.020 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:57.032 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:58.049 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:19:59.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:00.071 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:01.086 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:02.100 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:03.117 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:04.134 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:05.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:06.166 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:07.182 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:08.203 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:09.224 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:10.246 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:11.265 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:12.283 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:13.315 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:14.331 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:15.348 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:16.370 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:17.392 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:18.412 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:19.432 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:20.454 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:21.472 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:22.504 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:23.525 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:24.544 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:25.563 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:26.583 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:27.604 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:28.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:29.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:30.684 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:31.714 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:32.745 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:33.762 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:34.780 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:35.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:36.830 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:37.849 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:38.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:39.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:40.933 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:41.954 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:42.983 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:44.005 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:45.024 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:46.054 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:47.076 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:48.108 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:49.139 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:50.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:51.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:52.203 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:53.233 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:54.264 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:55.297 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:56.327 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:57.342 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:58.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:20:59.393 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:00.410 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:01.432 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:02.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:03.481 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:04.513 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:05.522 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:06.543 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:07.565 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:08.595 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:09.624 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:10.644 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:11.660 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:12.683 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:13.699 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:14.722 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:15.756 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:16.792 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:17.813 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:18.828 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:19.846 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:20.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:21.899 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:22.930 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:23.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:24.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:25.989 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:27.022 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:28.038 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:29.069 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:30.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:31.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:32.133 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:33.153 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:34.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:35.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:36.222 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:37.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:38.263 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:39.287 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:40.303 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:41.320 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:42.341 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:43.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:44.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:45.391 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:46.408 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:47.424 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:48.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:49.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:50.489 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:51.503 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:52.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:53.532 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:54.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:55.587 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:56.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:57.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:58.645 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:21:59.668 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:00.686 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:01.699 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:02.190 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:22:02.195 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:22:02.204 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:22:02.222 DEBUG ---- [executor-1] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:22:02.225 DEBUG ---- [executor-1] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:22:02.231 DEBUG ---- [executor-1] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:22:02.702 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [f69f550a-01e9-41a0-a25b-04a432ba3793] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:22:02.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:22:02.708 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:22:02.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:22:02.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:22:03.723 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:04.755 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:05.778 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:06.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:07.818 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:08.827 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:09.840 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:10.854 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:11.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:12.916 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:13.941 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:14.960 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:15.988 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:17.005 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:18.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:19.037 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:19.871 INFO  ---- [er#1-0-C-1] [NetworkClient:935] handleDisconnections   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Node -1 disconnected.
2023-12-24 17:22:19.871 INFO  ---- [er#0-0-C-1] [NetworkClient:935] handleDisconnections   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Node -1 disconnected.
2023-12-24 17:22:20.051 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:21.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:22.096 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:23.130 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:24.162 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:25.190 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:26.210 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:27.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:28.262 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:29.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:30.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:31.304 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:32.325 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:33.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:34.361 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:35.377 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:36.394 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:37.414 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:38.436 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:39.456 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:40.471 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:41.489 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:42.544 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:43.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:44.580 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:45.600 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:46.642 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:47.682 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:48.695 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:49.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:50.737 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:51.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:52.784 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:53.797 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:54.828 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:55.846 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:56.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:57.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:58.917 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:22:59.930 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:00.943 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:01.957 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:02.975 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:04.008 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:05.027 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:06.041 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:07.053 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:08.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:09.091 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:10.106 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:11.123 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:12.134 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:13.156 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:14.172 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:15.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:16.218 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:17.240 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:18.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:18.395 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:23:19.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:20.311 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:21.323 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:22.356 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:23.383 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:24.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:25.436 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:26.464 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:27.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:28.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:29.531 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:30.551 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:31.585 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:32.605 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:33.624 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:34.637 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:35.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:36.669 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:37.687 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:38.720 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:39.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:40.773 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:41.798 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:42.818 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:43.838 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:44.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:45.945 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:47.029 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:48.040 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:49.056 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:50.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:23:51.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:24:17.952 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 22116 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:24:17.954 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:24:18.034 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:24:18.034 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:24:20.691 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:24:20.694 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:24:20.819 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:24:20.897 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 192 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:24:20.925 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:24:20.926 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:24:21.113 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 174 ms. Found 1 JPA repository interfaces.
2023-12-24 17:24:21.633 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:24:28.050 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:24:28.101 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:24:28.104 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:24:28.332 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:24:28.334 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 10299 ms
2023-12-24 17:24:28.457 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:24:29.636 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:24:29.678 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:24:30.383 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:24:30.634 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:24:31.292 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:24:31.802 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:24:35.259 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:24:35.303 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:24:37.055 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:24:37.254 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:24:37.423 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:24:37.947 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:24:38.394 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:24:38.396 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:24:38.398 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:24:38.399 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:24:38.400 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:24:38.433 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:24:38.440 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:24:38.444 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:24:38.449 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:24:38.913 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:24:46.243 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:24:49.743 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:24:50.067 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:24:50.369 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:24:50.391 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:24:50.494 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:24:50.495 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:24:50.496 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:24:50.497 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:24:50.498 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:24:50.499 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:24:50.500 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:24:51.511 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:24:51.522 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:24:51.531 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:24:51.551 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703406291547 with initial instances count: 4
2023-12-24 17:24:51.564 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:24:51.565 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703406291565, current=UP, previous=STARTING]
2023-12-24 17:24:51.573 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:24:51.711 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:24:51.750 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:24:52.045 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:24:52.046 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:24:52.047 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406292037
2023-12-24 17:24:52.062 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:24:52.119 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:24:52.143 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:24:52.144 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:24:52.145 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406292143
2023-12-24 17:24:52.147 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:24:52.204 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:24:52.208 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:24:53.470 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:24:53.470 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:24:53.479 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:24:53.479 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:24:53.486 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:24:53.486 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:24:53.496 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:24:53.496 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:24:53.556 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:24:53.556 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:24:53.558 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:24:53.558 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:24:56.569 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=38, memberId='consumer-order-topic.v1-1-5dfb89ee-12d6-401d-b5bb-89c5a46a65af', protocol='range'}
2023-12-24 17:24:56.569 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=42, memberId='consumer-rollback-remove-order.v1-2-d5a6febf-ad61-4fa0-9c03-056c3e009088', protocol='range'}
2023-12-24 17:24:56.579 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 42: {consumer-rollback-remove-order.v1-2-d5a6febf-ad61-4fa0-9c03-056c3e009088=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:24:56.579 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 38: {consumer-order-topic.v1-1-5dfb89ee-12d6-401d-b5bb-89c5a46a65af=Assignment(partitions=[order-topic-0])}
2023-12-24 17:24:56.608 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=42, memberId='consumer-rollback-remove-order.v1-2-d5a6febf-ad61-4fa0-9c03-056c3e009088', protocol='range'}
2023-12-24 17:24:56.608 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=38, memberId='consumer-order-topic.v1-1-5dfb89ee-12d6-401d-b5bb-89c5a46a65af', protocol='range'}
2023-12-24 17:24:56.610 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:24:56.610 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:24:56.621 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:24:56.621 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:24:56.673 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:24:56.673 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:24:56.676 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:24:56.676 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:24:57.150 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:25:00.823 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:25:00.882 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:25:00.937 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:25:00.943 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:25:01.031 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:25:01.031 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:25:01.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:25:01.174 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:25:01.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:25:01.193 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:25:01.244 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:25:01.261 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:25:01.266 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:25:01.273 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:25:01.278 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 45.987 seconds (JVM running for 47.01)
2023-12-24 17:25:01.280 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=6} for segment: Segment[0/0]
2023-12-24 17:25:02.386 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:03.408 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:04.447 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:05.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:06.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:07.526 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:08.555 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:09.586 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:10.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:11.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:12.666 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:13.699 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:14.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:15.777 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:16.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:17.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:18.839 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:19.867 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:20.883 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:21.912 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:22.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:23.961 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:24.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:26.015 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:27.048 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:28.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:29.114 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:30.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:31.164 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:32.179 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:33.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:34.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:35.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:36.290 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:37.306 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:38.335 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:39.364 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:40.394 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:41.426 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:42.442 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:43.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:44.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:45.509 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:46.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:47.556 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:48.571 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:49.598 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:50.613 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:51.628 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:52.644 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:53.664 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:54.690 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:55.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:56.741 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:57.766 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:58.801 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:25:59.836 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:00.859 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:01.893 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:02.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:03.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:04.991 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:06.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:07.037 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:08.065 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:09.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:10.107 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:11.125 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:12.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:13.174 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:14.206 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:15.227 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:16.256 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:17.289 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:18.321 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:19.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:20.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:21.412 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:22.427 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:23.458 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:24.490 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:25.511 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:26.526 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:27.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:28.552 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:29.585 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:30.612 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:31.628 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:32.663 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:33.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:34.719 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:35.174 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:26:35.176 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:26:35.183 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 6 ms
2023-12-24 17:26:35.776 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:26:35.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:26:35.810 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:26:35.815 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:26:35.821 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:26:35.839 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:26:35.890 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:26:35.924 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:26:35.971 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:26:35.971 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:26:35.972 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406395970
2023-12-24 17:26:35.993 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:26:35.994 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:26:35.997 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10001 with epoch 0
2023-12-24 17:26:36.400 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [b7838b60-ad09-457d-be0f-b08daa7a0065] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:26:36.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:26:36.409 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:26:36.419 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:26:36.426 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:26:37.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:38.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:39.586 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:40.598 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:41.616 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:42.634 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:43.663 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:44.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:45.702 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:46.711 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:47.724 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:48.739 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:49.756 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:50.774 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:51.804 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:52.821 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:53.852 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:54.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:55.899 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:56.927 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:26:57.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:27:16.853 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 23604 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:27:16.858 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:27:16.962 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:27:16.962 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:27:19.552 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:27:19.553 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:27:19.691 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:27:19.731 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 171 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:27:19.742 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:27:19.742 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:27:19.902 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 155 ms. Found 1 JPA repository interfaces.
2023-12-24 17:27:20.516 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:27:23.876 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:27:23.906 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:27:23.908 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:27:24.061 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:27:24.062 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 7099 ms
2023-12-24 17:27:24.114 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:27:24.666 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:27:24.677 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:27:24.911 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:27:24.996 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:27:25.334 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:27:25.687 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:27:27.524 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:27:27.559 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:27:29.460 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:27:29.687 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:27:29.826 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:27:30.387 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:27:30.943 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:27:30.944 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:27:30.945 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:27:30.946 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:27:30.948 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:27:30.979 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:27:30.984 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:27:30.988 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:27:30.993 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:27:31.420 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:27:38.339 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:27:41.759 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:27:42.116 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:27:42.395 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:27:42.414 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:27:42.514 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:27:42.516 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:27:42.517 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:27:42.518 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:27:42.519 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:27:42.519 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:27:42.520 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:27:43.471 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:27:43.485 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:27:43.495 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:27:43.514 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703406463511 with initial instances count: 4
2023-12-24 17:27:43.523 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:27:43.525 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703406463525, current=UP, previous=STARTING]
2023-12-24 17:27:43.533 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:27:43.670 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:27:43.703 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:27:43.966 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:27:43.967 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:27:43.967 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406463962
2023-12-24 17:27:43.980 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:27:44.023 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:27:44.046 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:27:44.047 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:27:44.048 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406464046
2023-12-24 17:27:44.050 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:27:44.105 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:27:44.109 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:27:45.269 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:27:45.269 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:27:45.279 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:27:45.279 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:27:45.285 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:27:45.285 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:27:45.295 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:27:45.296 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:27:45.353 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:27:45.353 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:27:45.354 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:27:45.354 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:27:48.366 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=40, memberId='consumer-order-topic.v1-1-b21f4f72-b009-4a56-bb1e-1dd9b08e925d', protocol='range'}
2023-12-24 17:27:48.366 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=44, memberId='consumer-rollback-remove-order.v1-2-b9c33f96-9f39-4b5c-bdf4-07b56a01e7fd', protocol='range'}
2023-12-24 17:27:48.375 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 44: {consumer-rollback-remove-order.v1-2-b9c33f96-9f39-4b5c-bdf4-07b56a01e7fd=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:27:48.375 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 40: {consumer-order-topic.v1-1-b21f4f72-b009-4a56-bb1e-1dd9b08e925d=Assignment(partitions=[order-topic-0])}
2023-12-24 17:27:48.403 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=40, memberId='consumer-order-topic.v1-1-b21f4f72-b009-4a56-bb1e-1dd9b08e925d', protocol='range'}
2023-12-24 17:27:48.405 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:27:48.407 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=44, memberId='consumer-rollback-remove-order.v1-2-b9c33f96-9f39-4b5c-bdf4-07b56a01e7fd', protocol='range'}
2023-12-24 17:27:48.409 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:27:48.414 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:27:48.414 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:27:48.458 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:27:48.458 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:27:48.462 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:27:48.462 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:27:48.902 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:27:52.629 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:27:52.681 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:27:52.733 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:27:52.738 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:27:52.815 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:27:52.820 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:27:52.867 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:27:52.961 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:27:52.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:27:52.984 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:27:53.050 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:27:53.079 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 39.174 seconds (JVM running for 40.297)
2023-12-24 17:27:53.081 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:27:53.086 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:27:53.094 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:27:53.103 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=8} for segment: Segment[0/0]
2023-12-24 17:27:54.228 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:27:55.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:27:56.272 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:27:57.294 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:27:58.330 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:27:59.365 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:00.398 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:01.435 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:02.456 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:03.471 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:04.499 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:05.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:06.546 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:07.563 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:08.577 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:09.605 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:10.627 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:11.645 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:12.678 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:13.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:14.749 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:15.762 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:16.794 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:17.826 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:18.861 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:19.889 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:20.909 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:21.932 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:22.954 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:23.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:24.996 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:26.015 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:27.051 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:28.066 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:29.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:29.410 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:28:29.412 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:28:29.425 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 7 ms
2023-12-24 17:28:30.199 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:28:30.220 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:28:30.226 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:28:30.233 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:28:30.250 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:28:30.262 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:28:30.320 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:28:30.367 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:28:30.427 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:28:30.429 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:28:30.430 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406510427
2023-12-24 17:28:30.465 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:28:30.466 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:28:30.469 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10002 with epoch 0
2023-12-24 17:28:31.018 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [fef845af-5b5f-4280-ac30-d27eb9ed9104] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:28:31.024 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:28:31.027 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:28:31.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:28:31.039 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:28:32.057 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:33.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:34.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:35.116 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:36.134 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:37.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:38.177 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:39.213 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:40.246 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:41.262 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:42.277 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:43.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:44.421 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:45.565 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:46.610 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:47.629 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:48.654 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:49.673 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:50.688 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:51.720 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:52.752 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:53.770 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:54.791 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:55.805 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:56.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:57.851 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:58.881 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:28:59.913 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:00.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:01.955 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:02.987 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:04.017 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:05.047 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:06.077 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:07.101 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:08.120 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:09.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:10.145 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:11.175 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:12.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:13.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:14.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:15.279 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:16.311 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:17.329 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:18.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:19.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:20.379 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:21.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:22.425 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:23.439 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:24.454 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:25.470 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:26.484 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:27.499 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:28.520 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:29.552 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:30.571 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:31.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:32.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:33.649 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:34.681 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:35.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:36.736 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:37.747 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:38.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:39.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:40.796 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:41.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:42.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:43.875 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:44.908 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:45.924 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:46.938 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:47.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:48.982 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:50.047 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:51.073 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:52.089 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:53.120 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:54.138 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:55.161 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:56.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:57.213 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:58.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:29:59.259 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:00.292 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:01.307 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:02.336 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:03.371 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:04.402 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:05.439 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:06.463 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:07.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:08.517 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:09.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:10.580 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:11.595 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:12.629 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:13.646 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:14.655 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:15.677 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:16.693 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:17.711 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:18.720 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:19.750 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:20.769 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:21.783 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:22.803 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:23.830 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:24.863 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:25.892 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:26.924 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:27.955 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:28.978 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:29.996 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:31.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:32.027 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:33.061 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:34.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:35.094 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:36.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:37.144 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:38.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:39.193 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:40.223 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:41.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:42.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:43.280 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:44.302 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:45.325 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:46.354 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:47.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:48.400 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:49.434 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:50.450 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:51.481 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:52.498 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:53.526 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:54.560 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:55.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:56.605 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:57.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:58.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:30:59.683 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:00.695 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:01.720 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:02.737 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:03.761 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:04.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:05.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:06.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:07.837 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:08.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:09.892 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:10.911 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:11.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:12.946 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:13.974 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:14.993 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:16.011 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:17.022 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:18.040 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:19.073 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:20.102 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:21.133 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:22.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:23.332 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:24.350 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:25.385 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:26.414 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:27.429 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:28.457 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:29.487 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:30.505 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:31.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:32.551 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:33.572 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:34.604 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:35.637 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:36.665 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:37.688 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:38.708 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:39.799 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:40.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:41.855 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:42.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:43.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:44.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:45.957 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:46.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:47.997 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:49.021 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:50.040 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:51.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:52.091 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:53.119 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:54.151 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:55.172 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:56.192 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:57.206 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:58.241 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:31:59.255 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:00.285 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:01.299 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:02.316 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:03.336 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:04.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:05.366 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:06.382 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:07.413 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:08.447 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:09.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:10.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:11.517 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:12.532 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:13.555 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:14.575 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:15.598 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:16.617 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:17.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:18.664 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:19.687 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:20.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:21.740 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:22.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:23.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:24.840 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:25.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:26.874 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:27.904 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:28.927 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:29.958 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:30.991 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:32.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:33.040 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:34.072 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:35.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:36.108 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:37.127 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:38.164 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:39.187 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:40.204 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:41.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:42.264 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:42.540 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:32:43.277 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:44.307 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:45.342 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:46.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:47.392 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:48.425 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:49.441 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:50.470 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:51.514 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:52.547 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:53.577 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:54.604 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:55.637 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:56.648 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:57.663 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:58.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:32:59.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:00.721 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:01.754 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:02.777 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:03.805 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:04.826 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:05.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:06.865 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:07.893 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:08.910 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:09.939 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:10.965 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:11.984 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:12.995 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:14.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:15.042 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:16.070 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:17.085 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:18.117 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:19.137 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:20.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:21.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:22.188 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:23.208 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:24.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:25.274 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:26.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:27.314 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:28.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:29.360 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:30.390 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:31.413 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:32.424 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:33.437 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:34.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:35.468 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:36.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:37.513 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:38.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:39.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:40.569 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:41.656 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:42.691 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:43.724 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:44.757 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:45.771 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:46.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:47.822 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:48.855 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:49.888 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:50.928 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:51.955 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:52.974 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:54.004 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:55.028 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:56.056 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:57.086 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:58.105 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:33:59.132 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:00.150 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:01.167 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:02.227 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:03.282 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:04.300 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:05.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:06.446 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:07.513 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:08.532 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:09.552 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:10.571 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:11.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:34:12.616 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:24.842 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 14816 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:35:24.845 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:35:24.952 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:35:24.952 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:35:27.121 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:35:27.125 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:35:27.195 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:35:27.255 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 121 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:35:27.286 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:35:27.287 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:35:27.485 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 186 ms. Found 1 JPA repository interfaces.
2023-12-24 17:35:28.048 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:35:30.384 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:35:30.400 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:35:30.401 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:35:30.490 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:35:30.491 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 5538 ms
2023-12-24 17:35:30.553 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:35:30.920 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:35:30.936 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:35:31.166 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:35:31.270 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:35:31.545 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:35:31.733 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:35:33.061 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:35:33.080 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:35:34.245 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:35:34.332 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:35:34.414 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:35:34.812 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:35:35.031 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:35:35.031 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:35:35.032 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:35:35.032 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:35:35.032 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:35:35.045 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:35:35.050 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:35:35.054 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:35:35.056 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:35:35.209 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:35:38.688 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:35:39.882 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:35:39.990 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:35:40.103 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:35:40.114 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:35:40.174 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:35:40.175 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:35:40.176 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:35:40.178 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:35:40.178 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:35:40.179 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:35:40.179 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:35:40.684 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:35:40.689 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:35:40.696 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:35:40.705 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703406940702 with initial instances count: 2
2023-12-24 17:35:40.710 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:35:40.711 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703406940711, current=UP, previous=STARTING]
2023-12-24 17:35:40.716 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:35:40.809 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:35:40.848 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:35:40.973 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:35:40.973 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:35:40.974 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406940969
2023-12-24 17:35:40.982 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:35:41.012 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:35:41.028 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:35:41.028 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:35:41.029 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703406941028
2023-12-24 17:35:41.030 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:35:41.056 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:35:41.057 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:35:41.462 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:35:41.462 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:35:41.466 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:35:41.466 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:35:41.470 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:35:41.469 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:35:41.476 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:35:41.476 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:35:41.505 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:35:41.505 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:35:41.506 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:35:41.506 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:35:43.028 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:35:44.514 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=46, memberId='consumer-rollback-remove-order.v1-2-7282cb5b-5727-4583-8aca-3731c7997b0c', protocol='range'}
2023-12-24 17:35:44.514 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=42, memberId='consumer-order-topic.v1-1-a2106092-2d16-4c13-b253-f008ff7a56f0', protocol='range'}
2023-12-24 17:35:44.522 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 42: {consumer-order-topic.v1-1-a2106092-2d16-4c13-b253-f008ff7a56f0=Assignment(partitions=[order-topic-0])}
2023-12-24 17:35:44.522 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 46: {consumer-rollback-remove-order.v1-2-7282cb5b-5727-4583-8aca-3731c7997b0c=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:35:44.550 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=42, memberId='consumer-order-topic.v1-1-a2106092-2d16-4c13-b253-f008ff7a56f0', protocol='range'}
2023-12-24 17:35:44.550 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=46, memberId='consumer-rollback-remove-order.v1-2-7282cb5b-5727-4583-8aca-3731c7997b0c', protocol='range'}
2023-12-24 17:35:44.552 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:35:44.552 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:35:44.562 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:35:44.562 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:35:44.620 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:35:44.620 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:35:44.623 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:35:44.623 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:35:44.661 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:35:44.677 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:35:44.715 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:35:44.717 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:35:44.756 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:35:44.756 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:35:44.778 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:35:44.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:35:44.824 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:35:44.834 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:35:44.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:35:44.878 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:35:44.880 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:35:44.881 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 21.955 seconds (JVM running for 22.865)
2023-12-24 17:35:44.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:35:44.891 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=10} for segment: Segment[0/0]
2023-12-24 17:35:45.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:47.006 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:48.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:49.054 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:50.090 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:51.117 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:52.154 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:53.187 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:54.221 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:55.254 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:56.286 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:57.318 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:58.345 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:35:59.382 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:00.414 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:01.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:02.459 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:03.478 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:04.512 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:05.536 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:06.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:07.565 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:08.583 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:09.604 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:10.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:11.658 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:12.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:13.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:14.741 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:15.777 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:16.811 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:17.827 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:18.873 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:19.887 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:20.903 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:21.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:22.947 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:23.964 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:24.984 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:25.998 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:27.015 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:28.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:29.067 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:30.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:31.120 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:32.153 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:33.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:34.199 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:35.231 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:36.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:37.279 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:38.312 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:39.341 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:40.356 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:41.391 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:42.408 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:43.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:44.470 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:45.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:46.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:47.534 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:48.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:49.597 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:50.626 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:51.660 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:52.672 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:53.701 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:54.729 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:55.761 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:56.788 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:57.823 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:58.853 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:36:59.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:00.898 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:01.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:02.957 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:03.974 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:05.006 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:06.035 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:07.048 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:08.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:09.077 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:10.095 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:11.113 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:12.126 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:13.159 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:14.193 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:15.226 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:16.259 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:17.292 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:18.324 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:19.340 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:20.353 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:21.386 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:22.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:23.416 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:24.434 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:25.463 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:26.496 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:27.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:28.535 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:29.569 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:30.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:31.634 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:32.650 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:33.681 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:34.700 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:35.729 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:36.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:37.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:38.795 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:39.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:40.823 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:41.836 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:42.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:43.898 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:44.912 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:45.935 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:46.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:47.995 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:49.011 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:50.034 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:51.062 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:52.076 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:53.092 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:54.101 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:55.130 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:56.158 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:57.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:58.215 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:37:59.245 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:00.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:01.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:02.296 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:03.330 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:04.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:05.367 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:06.400 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:07.422 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:08.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:09.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:10.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:11.505 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:12.522 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:13.538 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:14.569 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:15.600 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:16.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:17.638 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:18.671 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:19.702 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:20.730 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:21.741 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:22.760 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:23.795 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:24.811 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:25.831 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:26.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:27.897 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:28.933 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:29.965 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:30.979 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:32.005 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:33.021 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:34.050 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:35.081 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:36.095 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:37.116 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:38.147 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:39.175 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:40.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:41.219 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:42.237 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:43.251 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:44.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:45.298 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:46.308 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:47.323 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:48.339 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:49.373 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:50.393 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:51.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:52.413 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:53.429 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:54.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:55.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:56.465 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:57.534 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:58.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:38:59.557 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:00.585 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:01.604 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:02.634 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:03.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:04.678 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:05.703 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:06.365 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:39:06.365 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:39:06.368 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 3 ms
2023-12-24 17:39:06.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:06.786 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:39:06.797 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:39:06.818 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:39:06.850 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:39:06.853 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:39:06.866 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:39:06.896 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:39:06.915 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:39:06.932 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:39:06.932 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:39:06.932 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407146932
2023-12-24 17:39:06.944 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:39:06.944 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:39:06.946 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10003 with epoch 0
2023-12-24 17:39:07.728 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [0be13427-b830-42e8-a1e8-acca576cbf82] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:39:07.733 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:39:07.735 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:39:07.742 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:39:07.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:39:08.769 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:09.783 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:10.797 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:11.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:12.840 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:13.857 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:14.874 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:15.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:16.913 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:17.935 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:18.945 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:19.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:20.989 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:21.998 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:23.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:24.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:25.039 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:26.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:27.078 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:28.095 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:29.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:30.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:31.153 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:32.166 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:33.186 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:34.200 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:35.220 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:36.255 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:37.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:38.326 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:39.346 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:40.380 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:41.418 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:42.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:43.451 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:44.483 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:45.501 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:46.526 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:47.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:48.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:49.589 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:50.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:51.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:52.684 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:53.698 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:54.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:55.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:56.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:57.806 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:58.821 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:39:59.835 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:00.866 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:01.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:02.913 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:03.925 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:04.942 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:05.959 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:06.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:07.993 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:09.014 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:10.045 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:11.076 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:12.094 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:13.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:14.124 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:15.157 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:16.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:17.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:18.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:19.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:20.267 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:21.300 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:22.331 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:23.345 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:24.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:25.400 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:26.420 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:27.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:28.462 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:40:43.501 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 27124 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:40:43.506 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:40:43.663 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:40:43.663 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:40:46.182 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:40:46.184 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:40:46.303 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:40:46.383 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 188 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:40:46.406 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:40:46.407 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:40:46.595 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 174 ms. Found 1 JPA repository interfaces.
2023-12-24 17:40:47.364 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:40:50.596 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:40:50.625 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:40:50.627 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:40:50.759 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:40:50.760 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 7096 ms
2023-12-24 17:40:50.816 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:40:51.390 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:40:51.401 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:40:51.718 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:40:51.852 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:40:52.295 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:40:52.616 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:40:54.087 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:40:54.103 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:40:55.129 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:40:55.269 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:40:55.371 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:40:55.752 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:40:56.119 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:40:56.120 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:40:56.121 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:40:56.121 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:40:56.121 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:40:56.132 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:40:56.134 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:40:56.136 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:40:56.138 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:40:56.390 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:40:59.333 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:41:00.446 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:41:00.621 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:41:00.864 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:41:00.877 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:41:00.940 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:41:00.942 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:41:00.942 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:41:00.943 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:41:00.944 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:41:00.944 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:41:00.944 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:41:01.417 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:41:01.423 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:41:01.427 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:41:01.434 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703407261433 with initial instances count: 4
2023-12-24 17:41:01.438 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:41:01.439 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703407261439, current=UP, previous=STARTING]
2023-12-24 17:41:01.442 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:41:01.491 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:41:01.498 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:41:01.675 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:41:01.676 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:41:01.676 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407261670
2023-12-24 17:41:01.683 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:41:01.708 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:41:01.724 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:41:01.725 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:41:01.725 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407261724
2023-12-24 17:41:01.727 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:41:01.767 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:41:01.769 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:41:02.338 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:41:02.338 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:41:02.341 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:41:02.341 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:41:02.344 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:41:02.344 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:41:02.349 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:41:02.349 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:41:02.378 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:41:02.378 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:41:02.379 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:41:02.379 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:41:03.897 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:41:05.395 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:41:05.437 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:41:05.467 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:41:05.471 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:41:05.525 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:41:05.525 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:41:05.564 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:41:05.632 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:41:05.641 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:41:05.654 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:41:05.690 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:41:05.699 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 24.607 seconds (JVM running for 25.665)
2023-12-24 17:41:05.704 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:41:05.707 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:41:05.711 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:41:05.716 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=12} for segment: Segment[0/0]
2023-12-24 17:41:06.777 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:07.808 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:08.837 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:09.854 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:10.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:11.893 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:12.324 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=47, memberId='consumer-rollback-remove-order.v1-2-fe824a90-0106-47e2-8dcd-e9166a8c70cc', protocol='range'}
2023-12-24 17:41:12.324 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=43, memberId='consumer-order-topic.v1-1-754a3380-0a82-4b4f-9946-1de4b0961a6d', protocol='range'}
2023-12-24 17:41:12.330 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 43: {consumer-order-topic.v1-1-754a3380-0a82-4b4f-9946-1de4b0961a6d=Assignment(partitions=[order-topic-0])}
2023-12-24 17:41:12.330 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 47: {consumer-rollback-remove-order.v1-2-fe824a90-0106-47e2-8dcd-e9166a8c70cc=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:41:12.364 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=43, memberId='consumer-order-topic.v1-1-754a3380-0a82-4b4f-9946-1de4b0961a6d', protocol='range'}
2023-12-24 17:41:12.366 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:41:12.378 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:41:12.382 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=47, memberId='consumer-rollback-remove-order.v1-2-fe824a90-0106-47e2-8dcd-e9166a8c70cc', protocol='range'}
2023-12-24 17:41:12.383 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:41:12.384 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:41:12.426 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:41:12.429 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:41:12.430 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:41:12.431 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:41:12.927 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:13.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:14.969 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:16.003 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:17.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:17.746 INFO  ---- [084-exec-2] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:41:17.747 INFO  ---- [084-exec-2] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:41:17.750 INFO  ---- [084-exec-2] [DispatcherServlet:547] initServletBean   Completed initialization in 2 ms
2023-12-24 17:41:18.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:41:18.068 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:41:18.075 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:41:18.077 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:41:18.081 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:41:18.087 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:41:18.113 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:41:18.130 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:41:18.150 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:41:18.151 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:41:18.151 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407278150
2023-12-24 17:41:18.182 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:41:18.183 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:41:18.184 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10004 with epoch 0
2023-12-24 17:41:18.334 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [8d4df42e-c649-402b-97a6-e69f0326a9ca] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:41:18.337 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:41:18.338 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:41:18.341 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:41:18.353 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:41:19.367 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:20.387 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:21.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:22.417 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:23.434 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:24.448 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:25.468 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:26.479 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:27.493 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:28.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:29.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:30.539 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:31.568 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:32.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:33.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:34.613 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:35.647 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:36.682 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:37.714 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:38.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:39.762 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:40.785 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:41.817 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:42.837 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:43.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:44.875 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:45.905 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:46.938 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:47.962 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:48.980 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:49.997 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:51.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:52.029 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:53.042 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:54.056 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:55.080 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:56.106 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:57.133 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:58.145 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:41:59.161 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:00.196 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:01.211 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:02.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:03.254 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:04.269 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:05.302 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:06.336 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:07.355 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:08.373 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:09.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:10.433 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:11.463 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:12.477 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:13.494 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:14.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:15.528 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:16.552 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:42:17.567 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:05.161 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 15856 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:43:05.165 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:43:05.255 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:43:05.256 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:43:07.740 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:43:07.742 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:43:07.865 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:43:07.947 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 197 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:43:07.963 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:43:07.964 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:43:08.118 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 145 ms. Found 1 JPA repository interfaces.
2023-12-24 17:43:08.796 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:43:12.275 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:43:12.289 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:43:12.290 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:43:12.370 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:43:12.371 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 7114 ms
2023-12-24 17:43:12.425 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:43:12.894 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:43:12.919 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:43:13.291 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:43:13.411 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:43:13.806 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:43:13.971 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:43:15.959 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:43:15.993 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:43:17.049 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:43:17.133 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:43:17.252 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:43:17.560 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:43:17.832 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:43:17.833 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:43:17.835 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:43:17.838 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:43:17.839 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:43:17.862 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:43:17.867 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:43:17.870 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:43:17.873 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:43:18.205 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:43:22.072 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:43:23.396 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:43:23.547 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:43:23.782 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:43:23.795 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:43:23.859 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:43:23.861 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:43:23.861 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:43:23.862 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:43:23.862 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:43:23.862 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:43:23.863 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:43:24.393 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:43:24.396 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:43:24.401 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:43:24.407 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703407404405 with initial instances count: 4
2023-12-24 17:43:24.410 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:43:24.411 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703407404411, current=UP, previous=STARTING]
2023-12-24 17:43:24.414 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:43:24.468 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:43:24.471 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:43:24.621 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:43:24.621 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:43:24.621 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407404617
2023-12-24 17:43:24.628 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:43:24.662 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:43:24.683 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:43:24.683 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:43:24.683 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407404682
2023-12-24 17:43:24.685 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:43:24.729 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:43:24.732 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:43:25.311 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:43:25.311 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:43:25.314 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:43:25.314 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:43:25.316 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:43:25.316 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:43:25.321 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:43:25.321 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:43:25.344 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:43:25.344 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:43:25.344 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:43:25.344 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:43:26.677 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:43:28.351 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=45, memberId='consumer-order-topic.v1-1-8941d833-9f71-4ee1-81c3-46d3fa5c3cfe', protocol='range'}
2023-12-24 17:43:28.351 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=49, memberId='consumer-rollback-remove-order.v1-2-24fa7f96-c328-4383-b799-94cc98953f8b', protocol='range'}
2023-12-24 17:43:28.362 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 45: {consumer-order-topic.v1-1-8941d833-9f71-4ee1-81c3-46d3fa5c3cfe=Assignment(partitions=[order-topic-0])}
2023-12-24 17:43:28.362 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 49: {consumer-rollback-remove-order.v1-2-24fa7f96-c328-4383-b799-94cc98953f8b=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:43:28.393 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=45, memberId='consumer-order-topic.v1-1-8941d833-9f71-4ee1-81c3-46d3fa5c3cfe', protocol='range'}
2023-12-24 17:43:28.394 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:43:28.402 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:43:28.439 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:43:28.440 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:43:28.444 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:43:28.464 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:43:28.486 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:43:28.489 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:43:28.496 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=49, memberId='consumer-rollback-remove-order.v1-2-24fa7f96-c328-4383-b799-94cc98953f8b', protocol='range'}
2023-12-24 17:43:28.497 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:43:28.497 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:43:28.504 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:43:28.505 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:43:28.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:43:28.530 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:43:28.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:43:28.590 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:43:28.594 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:43:28.602 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:43:28.621 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:43:28.623 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 25.558 seconds (JVM running for 26.922)
2023-12-24 17:43:28.630 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:43:28.632 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:43:28.635 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:43:28.639 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=14} for segment: Segment[0/0]
2023-12-24 17:43:29.694 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:30.739 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:31.645 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:43:31.645 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:43:31.650 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 5 ms
2023-12-24 17:43:31.785 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:32.301 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:43:32.308 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:43:32.321 DEBUG ---- [executor-1] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:43:32.322 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:43:32.324 DEBUG ---- [executor-1] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:43:32.334 DEBUG ---- [executor-1] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:43:32.358 INFO  ---- [executor-1] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:43:32.389 INFO  ---- [executor-1] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:43:32.430 INFO  ---- [executor-1] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:43:32.431 INFO  ---- [executor-1] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:43:32.431 INFO  ---- [executor-1] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407412430
2023-12-24 17:43:32.480 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:43:32.481 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:43:32.483 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10005 with epoch 0
2023-12-24 17:43:32.693 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [e831b57a-de48-4d93-a2b1-5a4f4216e420] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:43:32.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:43:32.708 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:43:32.714 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:43:32.720 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:43:33.742 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:34.759 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:35.795 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:36.811 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:37.831 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:38.848 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:39.862 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:40.877 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:43:55.532 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 22980 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:43:55.535 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:43:55.613 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:43:55.614 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:43:58.074 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:43:58.078 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:43:58.146 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:43:58.178 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 92 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:43:58.189 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:43:58.190 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:43:58.345 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 151 ms. Found 1 JPA repository interfaces.
2023-12-24 17:43:58.971 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:44:01.621 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:44:01.635 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:44:01.636 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:44:01.715 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:44:01.717 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 6102 ms
2023-12-24 17:44:01.777 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:44:02.385 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:44:02.411 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:44:02.651 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:44:02.755 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:44:03.056 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:44:03.230 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:44:05.078 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:44:05.111 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:44:06.041 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:44:06.165 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:44:06.225 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:44:06.511 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:44:06.870 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:44:06.871 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:44:06.871 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:44:06.871 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:44:06.872 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:44:06.882 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:44:06.884 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:44:06.885 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:44:06.886 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:44:07.019 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:44:09.712 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:44:10.860 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:44:11.025 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:44:11.237 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:44:11.245 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:44:11.311 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:44:11.312 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:44:11.313 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:44:11.314 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:44:11.315 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:44:11.316 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:44:11.317 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:44:12.383 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:44:12.399 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:44:12.409 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:44:12.432 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703407452427 with initial instances count: 4
2023-12-24 17:44:12.445 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:44:12.447 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703407452447, current=UP, previous=STARTING]
2023-12-24 17:44:12.453 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:44:12.591 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:44:12.616 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:44:12.905 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:44:12.906 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:44:12.906 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407452897
2023-12-24 17:44:12.916 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:44:12.967 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:44:12.992 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:44:12.993 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:44:12.994 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407452992
2023-12-24 17:44:12.996 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:44:13.056 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:44:13.059 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:44:14.097 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:44:14.097 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:44:14.100 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:44:14.100 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:44:14.102 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:44:14.102 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:44:14.106 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:44:14.106 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:44:14.128 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:44:14.128 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:44:14.129 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:44:14.129 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:44:15.558 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:44:17.144 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:44:17.193 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:44:17.221 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:44:17.223 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:44:17.285 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:44:17.285 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:44:17.305 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:44:17.338 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:44:17.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:44:17.350 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:44:17.368 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:44:17.373 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 24.202 seconds (JVM running for 25.41)
2023-12-24 17:44:17.389 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:44:17.391 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:44:17.393 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:44:17.397 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=16} for segment: Segment[0/0]
2023-12-24 17:44:18.453 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:19.474 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:19.500 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:44:19.501 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:44:19.504 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 3 ms
2023-12-24 17:44:19.786 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:44:19.794 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:44:19.803 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:44:19.814 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:44:19.830 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:44:19.869 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:44:19.903 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:44:19.920 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:44:19.943 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:44:19.943 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:44:19.943 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407459943
2023-12-24 17:44:19.963 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:44:19.964 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:44:19.966 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10006 with epoch 0
2023-12-24 17:44:20.164 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [fb1dc063-871b-42f2-a77c-df9f0e016149] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:44:20.167 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:44:20.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:44:20.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:44:20.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:44:21.197 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:22.227 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:23.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:24.284 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:25.314 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:25.391 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=46, memberId='consumer-order-topic.v1-1-7d75cbd3-4ca1-48ac-b1df-786d303ee36d', protocol='range'}
2023-12-24 17:44:25.391 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=50, memberId='consumer-rollback-remove-order.v1-2-4fddebc3-1480-42de-9d6e-e64d412015d0', protocol='range'}
2023-12-24 17:44:25.398 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 46: {consumer-order-topic.v1-1-7d75cbd3-4ca1-48ac-b1df-786d303ee36d=Assignment(partitions=[order-topic-0])}
2023-12-24 17:44:25.398 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 50: {consumer-rollback-remove-order.v1-2-4fddebc3-1480-42de-9d6e-e64d412015d0=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:44:25.432 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=50, memberId='consumer-rollback-remove-order.v1-2-4fddebc3-1480-42de-9d6e-e64d412015d0', protocol='range'}
2023-12-24 17:44:25.432 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=46, memberId='consumer-order-topic.v1-1-7d75cbd3-4ca1-48ac-b1df-786d303ee36d', protocol='range'}
2023-12-24 17:44:25.433 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:44:25.433 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:44:25.437 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:44:25.437 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:44:25.472 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:44:25.472 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:44:25.474 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:44:25.474 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:44:26.326 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:27.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:28.370 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:29.385 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:30.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:31.428 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:32.442 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:33.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:34.492 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:35.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:36.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:37.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:38.595 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:39.627 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:40.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:41.695 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:42.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:43.749 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:44.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:45.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:46.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:47.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:48.890 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:49.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:50.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:51.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:52.997 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:54.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:55.038 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:56.068 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:57.077 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:58.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:44:59.136 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:00.167 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:01.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:02.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:03.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:04.250 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:05.264 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:06.292 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:07.314 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:08.325 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:09.341 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:10.355 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:11.383 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:12.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:13.417 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:14.432 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:15.456 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:16.465 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:17.478 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:18.488 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:19.504 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:20.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:21.555 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:22.563 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:23.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:24.604 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:25.621 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:26.639 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:27.666 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:28.685 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:29.700 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:30.720 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:31.734 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:32.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:33.759 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:34.789 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:35.806 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:36.821 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:37.834 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:38.852 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:39.870 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:40.886 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:41.899 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:42.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:43.937 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:44.972 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:46.002 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:47.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:48.052 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:49.074 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:50.089 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:51.104 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:52.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:53.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:54.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:55.173 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:56.204 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:57.286 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:58.303 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:45:59.321 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:00.340 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:01.353 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:02.372 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:03.387 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:04.395 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:05.415 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:06.451 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:07.555 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:08.587 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:09.594 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:10.619 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:11.631 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:12.663 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:13.675 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:14.690 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:15.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:16.730 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:17.745 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:18.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:19.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:20.800 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:21.814 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:22.826 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:23.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:24.860 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:25.880 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:26.896 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:27.914 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:28.932 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:29.945 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:30.960 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:31.968 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:33.006 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:34.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:35.121 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:36.139 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:37.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:38.186 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:39.202 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:40.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:41.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:42.241 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:43.263 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:44.281 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:45.301 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:46.318 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:47.333 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:48.346 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:49.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:50.377 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:51.390 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:52.406 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:53.420 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:54.444 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:55.455 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:56.468 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:57.483 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:58.511 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:46:59.532 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:00.547 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:01.561 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:02.576 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:03.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:04.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:05.609 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:06.636 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:07.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:08.667 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:09.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:10.696 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:11.710 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:12.727 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:13.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:14.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:15.802 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:16.836 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:17.869 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:18.890 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:19.913 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:20.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:21.951 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:22.976 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:24.010 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:25.044 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:26.079 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:27.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:28.145 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:29.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:30.193 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:31.224 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:32.256 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:33.272 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:34.290 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:35.324 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:36.354 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:37.370 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:38.385 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:39.402 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:40.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:41.451 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:42.481 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:43.596 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:44.626 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:45.662 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:46.700 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:47.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:48.757 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:49.778 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:50.806 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:51.840 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:52.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:53.896 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:54.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:55.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:56.967 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:57.997 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:47:59.020 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:00.040 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:01.056 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:02.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:03.073 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:04.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:05.099 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:06.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:07.119 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:08.148 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:09.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:10.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:11.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:12.259 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:13.316 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:14.332 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:15.348 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:16.378 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:17.409 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:18.440 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:19.467 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:20.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:21.529 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:22.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:23.567 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:24.597 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:25.611 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:26.625 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:27.638 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:28.650 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:29.677 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:30.683 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:31.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:32.733 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:33.804 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:34.836 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:35.842 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:36.876 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:37.897 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:48:53.900 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 28644 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:48:53.903 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:48:53.989 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:48:53.989 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:48:56.077 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:48:56.080 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:48:56.155 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:48:56.202 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 111 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:48:56.214 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:48:56.214 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:48:56.306 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 87 ms. Found 1 JPA repository interfaces.
2023-12-24 17:48:56.939 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:48:59.854 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:48:59.875 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:48:59.877 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:49:00.018 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:49:00.020 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 6030 ms
2023-12-24 17:49:00.097 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:49:00.643 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:49:00.655 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:49:00.886 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:49:00.972 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:49:01.247 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:49:01.540 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:49:03.356 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:49:03.387 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:49:04.548 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:49:04.718 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:49:04.838 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:49:05.216 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:49:05.513 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:49:05.514 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:49:05.514 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:49:05.515 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:49:05.515 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:49:05.526 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:49:05.528 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:49:05.529 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:49:05.531 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:49:05.673 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:49:09.137 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:49:10.944 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:49:11.090 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:49:11.195 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:49:11.203 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:49:11.242 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:49:11.243 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:49:11.244 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:49:11.244 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:49:11.244 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:49:11.244 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:49:11.244 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:49:11.819 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:49:11.827 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:49:11.833 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:49:11.846 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703407751844 with initial instances count: 4
2023-12-24 17:49:11.851 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:49:11.852 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703407751852, current=UP, previous=STARTING]
2023-12-24 17:49:11.859 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:49:11.942 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:49:11.956 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:49:12.067 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:49:12.068 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:49:12.068 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407752064
2023-12-24 17:49:12.076 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:49:12.114 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:49:12.133 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:49:12.133 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:49:12.134 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407752133
2023-12-24 17:49:12.135 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:49:12.168 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:49:12.170 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:49:12.571 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:49:12.572 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:49:12.575 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:49:12.575 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:49:12.578 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:49:12.578 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:49:12.583 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:49:12.584 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:49:12.614 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:49:12.614 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:49:12.615 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:49:12.615 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:49:14.140 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:49:15.793 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:49:15.819 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:49:15.850 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:49:15.854 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:49:15.903 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:49:15.903 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:49:15.924 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:49:15.960 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:49:15.964 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:49:15.972 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:49:15.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:49:15.995 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 24.534 seconds (JVM running for 25.734)
2023-12-24 17:49:16.001 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:49:16.003 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:49:16.006 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:49:16.010 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=18} for segment: Segment[0/0]
2023-12-24 17:49:17.059 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:18.075 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:19.096 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:20.139 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:21.172 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:22.208 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:23.054 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=51, memberId='consumer-rollback-remove-order.v1-2-45863cda-370c-4163-b22b-244b6d9436b0', protocol='range'}
2023-12-24 17:49:23.060 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 51: {consumer-rollback-remove-order.v1-2-45863cda-370c-4163-b22b-244b6d9436b0=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:49:23.087 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=51, memberId='consumer-rollback-remove-order.v1-2-45863cda-370c-4163-b22b-244b6d9436b0', protocol='range'}
2023-12-24 17:49:23.089 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:49:23.096 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:49:23.115 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=47, memberId='consumer-order-topic.v1-1-dca47f42-e88c-4656-b8a9-db1f5e943385', protocol='range'}
2023-12-24 17:49:23.116 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 47: {consumer-order-topic.v1-1-dca47f42-e88c-4656-b8a9-db1f5e943385=Assignment(partitions=[order-topic-0])}
2023-12-24 17:49:23.141 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:49:23.144 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:49:23.224 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=47, memberId='consumer-order-topic.v1-1-dca47f42-e88c-4656-b8a9-db1f5e943385', protocol='range'}
2023-12-24 17:49:23.224 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:49:23.224 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:49:23.230 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:49:23.231 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:49:23.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:24.251 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:25.274 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:26.285 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:27.300 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:27.861 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:49:27.862 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:49:27.868 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 5 ms
2023-12-24 17:49:28.234 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:49:28.243 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:49:28.254 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:49:28.256 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:49:28.257 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:49:28.267 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:49:28.290 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:49:28.305 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:49:28.321 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:49:28.321 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:49:28.321 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407768321
2023-12-24 17:49:28.337 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:49:28.338 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:49:28.339 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10007 with epoch 0
2023-12-24 17:49:28.566 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [3d3ad080-ce13-40c7-92ac-bcd2b2b72a83] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:49:28.569 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:49:28.570 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:49:28.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:49:28.575 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:49:29.590 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:30.616 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:31.650 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:32.670 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:33.689 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:34.704 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:35.725 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:36.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:37.814 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:38.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:39.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:40.898 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:41.911 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:42.930 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:43.961 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:44.992 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:46.011 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:47.042 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:48.069 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:49.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:50.136 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:51.155 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:52.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:53.203 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:54.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:55.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:56.292 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:49:57.311 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:50:49.266 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 24764 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:50:49.270 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:50:49.365 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:50:49.365 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:50:51.964 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:50:51.967 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:50:52.045 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:50:52.094 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 117 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:50:52.115 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:50:52.115 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:50:52.329 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 206 ms. Found 1 JPA repository interfaces.
2023-12-24 17:50:53.046 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:50:55.881 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:50:55.898 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:50:55.900 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:50:56.006 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:50:56.007 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 6640 ms
2023-12-24 17:50:56.075 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:50:56.475 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:50:56.489 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:50:56.824 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:50:56.927 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:50:57.328 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:50:57.606 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:50:59.968 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:51:00.007 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:51:01.260 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:51:01.421 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:51:01.523 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:51:01.848 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:51:02.114 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:51:02.115 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:51:02.116 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:51:02.116 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:51:02.117 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:51:02.128 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:51:02.129 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:51:02.132 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:51:02.134 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:51:02.370 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:51:05.585 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:51:07.166 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:51:07.406 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:51:07.612 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:51:07.624 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:51:07.673 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:51:07.675 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:51:07.676 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:51:07.679 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:51:07.680 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:51:07.681 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:51:07.681 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:51:08.178 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:51:08.185 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:51:08.188 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:51:08.195 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703407868194 with initial instances count: 4
2023-12-24 17:51:08.200 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:51:08.200 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703407868200, current=UP, previous=STARTING]
2023-12-24 17:51:08.202 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:51:08.259 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:51:08.298 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:51:08.419 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:51:08.420 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:51:08.420 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407868417
2023-12-24 17:51:08.425 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:51:08.449 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:51:08.462 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:51:08.463 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:51:08.463 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407868462
2023-12-24 17:51:08.464 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:51:08.502 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:51:08.506 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:51:09.486 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:51:09.486 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:51:09.490 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:51:09.490 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:51:09.494 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:51:09.494 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:51:09.501 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:51:09.501 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:51:09.545 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:51:09.545 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:51:09.546 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:51:09.549 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:51:11.096 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:51:12.556 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=53, memberId='consumer-rollback-remove-order.v1-2-bc4cf677-06b9-4474-b09c-7f2c7ccc6667', protocol='range'}
2023-12-24 17:51:12.558 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=49, memberId='consumer-order-topic.v1-1-eb536bea-3f4c-4f6c-95d8-a5ea6bfcb1bd', protocol='range'}
2023-12-24 17:51:12.562 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 53: {consumer-rollback-remove-order.v1-2-bc4cf677-06b9-4474-b09c-7f2c7ccc6667=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:51:12.562 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 49: {consumer-order-topic.v1-1-eb536bea-3f4c-4f6c-95d8-a5ea6bfcb1bd=Assignment(partitions=[order-topic-0])}
2023-12-24 17:51:12.591 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=53, memberId='consumer-rollback-remove-order.v1-2-bc4cf677-06b9-4474-b09c-7f2c7ccc6667', protocol='range'}
2023-12-24 17:51:12.591 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=49, memberId='consumer-order-topic.v1-1-eb536bea-3f4c-4f6c-95d8-a5ea6bfcb1bd', protocol='range'}
2023-12-24 17:51:12.591 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:51:12.591 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:51:12.596 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:51:12.596 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:51:12.616 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:51:12.616 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:51:12.618 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:51:12.618 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:51:12.964 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:51:12.982 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:51:13.004 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:51:13.007 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:51:13.045 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:51:13.045 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:51:13.071 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:51:13.127 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:51:13.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:51:13.139 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:51:13.165 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:51:13.166 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 26.825 seconds (JVM running for 28.281)
2023-12-24 17:51:13.175 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:51:13.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:51:13.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:51:13.184 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=20} for segment: Segment[0/0]
2023-12-24 17:51:14.236 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:15.278 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:16.305 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:16.458 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:51:16.458 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:51:16.468 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 9 ms
2023-12-24 17:51:16.870 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:51:16.881 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:51:16.886 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:51:16.890 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:51:16.904 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:51:16.904 INFO  ---- [ocessor]-0] [OrderCreateSaga:44] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:51:29.753 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:51:29.775 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:51:29.799 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:51:29.800 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:51:29.800 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703407889799
2023-12-24 17:51:29.814 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:51:29.815 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:51:29.816 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10008 with epoch 0
2023-12-24 17:51:30.036 ERROR ---- [ocessor]-0] [LoggingErrorHandler:53] onError   EventListener [AnnotatedSaga] failed to handle event [b28b67b7-973e-4f7d-90c7-8aaba0c82bcc] (com.example.order.adapter.axon.event.RegisterOrderCreatedEvent). Continuing processing with next listener
feign.codec.DecodeException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at feign.InvocationContext.proceed(InvocationContext.java:40)
	at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:116)
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:89)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:141)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:91)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy181.getMember(Unknown Source)
	at com.example.order.adapter.out.service.MemberServiceAdapter.getMember(MemberServiceAdapter.java:21)
	at com.example.order.adapter.axon.saga.OrderCreateSaga.handle(OrderCreateSaga.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember.handle(AnnotatedMessageHandlingMember.java:153)
	at org.axonframework.modelling.saga.SagaMethodMessageHandlingMember.handle(SagaMethodMessageHandlingMember.java:80)
	at org.axonframework.messaging.annotation.WrappedMessageHandlingMember.handle(WrappedMessageHandlingMember.java:64)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.lambda$handle$1(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.tracing.TracingHandlerEnhancerDefinition$1.handle(TracingHandlerEnhancerDefinition.java:84)
	at org.axonframework.messaging.annotation.NoMoreInterceptors.handle(NoMoreInterceptors.java:46)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$8(AnnotatedSaga.java:126)
	at org.axonframework.messaging.Scope.executeWithResult(Scope.java:111)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:126)
	at org.axonframework.modelling.saga.AnnotatedSaga.lambda$handle$7(AnnotatedSaga.java:118)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.axonframework.modelling.saga.AnnotatedSaga.handle(AnnotatedSaga.java:118)
	at org.axonframework.modelling.saga.AbstractSagaManager.doInvokeSaga(AbstractSagaManager.java:182)
	at org.axonframework.modelling.saga.AbstractSagaManager.startNewSaga(AbstractSagaManager.java:123)
	at org.axonframework.modelling.saga.AbstractSagaManager.lambda$handle$4(AbstractSagaManager.java:107)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.modelling.saga.AbstractSagaManager.handle(AbstractSagaManager.java:106)
	at org.axonframework.eventhandling.MultiEventHandlerInvoker.handle(MultiEventHandlerInvoker.java:91)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$1(AbstractEventProcessor.java:174)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$null$2(AbstractEventProcessor.java:171)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:57)
	at org.axonframework.messaging.interceptors.CorrelationDataInterceptor.handle(CorrelationDataInterceptor.java:67)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.tracing.Span.runCallable(Span.java:132)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$3(TrackingEventProcessor.java:185)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.TrackingEventProcessor.lambda$new$1(TrackingEventProcessor.java:179)
	at org.axonframework.messaging.DefaultInterceptorChain.proceed(DefaultInterceptorChain.java:55)
	at org.axonframework.eventhandling.AbstractEventProcessor.lambda$processInUnitOfWork$3(AbstractEventProcessor.java:182)
	at org.axonframework.messaging.unitofwork.BatchingUnitOfWork.executeWithResult(BatchingUnitOfWork.java:92)
	at org.axonframework.eventhandling.AbstractEventProcessor.processInUnitOfWork(AbstractEventProcessor.java:165)
	at org.axonframework.eventhandling.TrackingEventProcessor.processBatch(TrackingEventProcessor.java:490)
	at org.axonframework.eventhandling.TrackingEventProcessor.processingLoop(TrackingEventProcessor.java:318)
	at org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker.run(TrackingEventProcessor.java:1145)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.cleanUp(TrackingEventProcessor.java:1340)
	at org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher.run(TrackingEventProcessor.java:1317)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.springframework.web.client.RestClientException: Error while extracting response for type [class com.example.order.adapter.out.service.Member] and content type [application/json]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:120)
	at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:75)
	at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:61)
	at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:36)
	at feign.InvocationContext.proceed(InvocationContext.java:36)
	... 51 common frames omitted
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:391)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:343)
	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:105)
	... 55 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.order.adapter.out.service.Member` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1462)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:648)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3682)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:380)
	... 57 common frames omitted
2023-12-24 17:51:30.039 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:30.044 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:51:30.048 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:51:30.053 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:51:30.061 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:51:31.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:32.098 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:33.129 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:34.161 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:35.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:36.210 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:37.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:38.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:39.276 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:40.308 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:41.326 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:42.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:43.377 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:44.410 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:45.444 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:46.473 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:47.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:48.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:49.533 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:50.551 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:51.581 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:52.598 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:53.629 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:54.662 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:55.686 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:56.705 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:57.721 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:58.745 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:51:59.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:00.801 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:01.821 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:02.852 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:03.885 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:04.919 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:05.934 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:06.954 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:07.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:09.009 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:10.037 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:11.074 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:12.110 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:13.130 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:14.165 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:15.185 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:16.218 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:17.236 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:18.271 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:19.300 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:20.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:21.511 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:22.611 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:23.627 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:24.652 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:25.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:26.705 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:27.726 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:28.758 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:29.771 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:30.787 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:31.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:32.844 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:33.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:34.895 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:35.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:36.940 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:52:37.952 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:04.257 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 23996 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:53:04.260 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:53:04.342 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:53:04.342 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:53:06.657 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:53:06.659 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:53:06.794 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:53:06.848 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 176 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:53:06.870 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:53:06.870 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:53:07.082 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 201 ms. Found 1 JPA repository interfaces.
2023-12-24 17:53:07.746 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:53:12.886 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:53:12.907 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:53:12.908 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:53:13.006 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:53:13.006 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 8663 ms
2023-12-24 17:53:13.076 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:53:13.405 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:53:13.415 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:53:13.671 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:53:13.775 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:53:14.025 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:53:14.287 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:53:16.086 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:53:16.115 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:53:17.184 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:53:17.424 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:53:17.566 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:53:18.290 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:53:18.864 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:53:18.865 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:53:18.867 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:53:18.868 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:53:18.869 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:53:18.882 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:53:18.885 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:53:18.886 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:53:18.890 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:53:19.038 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:53:23.881 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:53:25.569 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:53:25.744 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:53:25.882 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:53:25.892 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:53:25.941 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:53:25.942 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:53:25.943 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:53:25.943 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:53:25.943 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:53:25.944 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:53:25.944 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:53:26.387 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:53:26.392 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:53:26.396 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:53:26.403 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703408006401 with initial instances count: 4
2023-12-24 17:53:26.408 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:53:26.409 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703408006409, current=UP, previous=STARTING]
2023-12-24 17:53:26.412 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:53:26.466 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:53:26.488 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:53:26.645 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:53:26.645 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:53:26.646 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703408006642
2023-12-24 17:53:26.654 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:53:26.692 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:53:26.710 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:53:26.710 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:53:26.711 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703408006710
2023-12-24 17:53:26.711 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:53:26.746 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:53:26.748 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:53:27.175 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:53:27.179 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:53:27.179 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:53:27.180 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:53:27.182 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:53:27.182 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:53:27.188 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:53:27.188 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:53:27.213 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:53:27.213 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:53:27.213 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:53:27.213 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:53:28.762 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:53:30.222 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=55, memberId='consumer-rollback-remove-order.v1-2-4390e363-6d79-475e-9db0-4941e7feaa01', protocol='range'}
2023-12-24 17:53:30.228 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=51, memberId='consumer-order-topic.v1-1-200014ba-8843-4ef7-bd09-9001a04b82d1', protocol='range'}
2023-12-24 17:53:30.231 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 51: {consumer-order-topic.v1-1-200014ba-8843-4ef7-bd09-9001a04b82d1=Assignment(partitions=[order-topic-0])}
2023-12-24 17:53:30.231 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 55: {consumer-rollback-remove-order.v1-2-4390e363-6d79-475e-9db0-4941e7feaa01=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:53:30.257 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=55, memberId='consumer-rollback-remove-order.v1-2-4390e363-6d79-475e-9db0-4941e7feaa01', protocol='range'}
2023-12-24 17:53:30.257 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=51, memberId='consumer-order-topic.v1-1-200014ba-8843-4ef7-bd09-9001a04b82d1', protocol='range'}
2023-12-24 17:53:30.259 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:53:30.259 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:53:30.266 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:53:30.266 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:53:30.306 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:53:30.306 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:53:30.309 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:53:30.309 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:53:30.428 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:53:30.447 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:53:30.469 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:53:30.472 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:53:30.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:53:30.516 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:53:30.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:53:30.576 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:53:30.581 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:53:30.587 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:53:30.607 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:53:30.618 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 29.301 seconds (JVM running for 30.465)
2023-12-24 17:53:30.619 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:53:30.621 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:53:30.624 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:53:30.629 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=22} for segment: Segment[0/0]
2023-12-24 17:53:31.695 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:32.723 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:33.756 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:34.791 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:35.809 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:36.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:37.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:38.867 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:39.900 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:40.934 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:41.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:43.019 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:44.053 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:45.088 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:46.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:47.135 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:48.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:49.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:50.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:51.228 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:52.260 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:53.293 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:54.313 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:55.335 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:56.351 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:57.385 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:58.402 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:53:59.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:00.468 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:01.501 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:02.523 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:03.555 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:04.584 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:05.613 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:06.627 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:07.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:08.667 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:09.697 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:10.726 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:11.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:12.779 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:13.800 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:14.822 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:15.841 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:16.853 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:17.883 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:18.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:19.947 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:20.983 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:22.008 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:23.043 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:24.075 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:25.242 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:25.506 INFO  ---- [084-exec-1] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 17:54:25.506 INFO  ---- [084-exec-1] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 17:54:25.511 INFO  ---- [084-exec-1] [DispatcherServlet:547] initServletBean   Completed initialization in 4 ms
2023-12-24 17:54:26.306 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:26.550 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 17:54:26.559 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 17:54:26.577 INFO  ---- [ocessor]-0] [OrderCreateSaga:42] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 17:54:26.641 DEBUG ---- [executor-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:54:26.644 DEBUG ---- [executor-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:54:26.657 DEBUG ---- [executor-0] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 17:54:26.699 INFO  ---- [executor-0] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 17:54:26.715 INFO  ---- [executor-0] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 17:54:26.738 INFO  ---- [executor-0] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:54:26.739 INFO  ---- [executor-0] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:54:26.740 INFO  ---- [executor-0] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703408066738
2023-12-24 17:54:26.770 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 17:54:26.770 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:54:26.774 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10009 with epoch 0
2023-12-24 17:54:26.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:54:26.934 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:54:26.938 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 17:54:26.940 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 17:54:26.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 17:54:26.947 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:54:26.950 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 17:54:27.962 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:27.977 WARN  ---- [executor-0] [DefaultCommandGateway:85] lambda$onResult$0   Command 'org.example.event.CheckRegisteredMemberCommand' resulted in org.axonframework.commandhandling.CommandExecutionException(OUT_OF_RANGE: [AXONIQ-2000] Invalid sequence number 1 for aggregate 657ba48d-2b39-4efb-9126-35357ebf6346, expected 0)
2023-12-24 17:54:27.978 ERROR ---- [executor-0] [OrderCreateSaga:68] lambda$handle$0   CheckRegisteredBankAccountCommand Command failed
2023-12-24 17:54:28.979 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:29.996 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:31.013 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:32.028 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:33.045 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:34.064 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:35.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:36.103 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:37.121 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:38.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:39.170 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:40.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:41.219 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:42.236 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:43.246 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:44.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:45.274 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:46.289 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:47.309 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:48.329 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:49.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:50.390 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:51.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:52.423 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:53.440 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:54.461 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:55.481 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:56.517 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:57.533 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:58.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:54:59.570 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:00.602 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:01.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:02.654 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:03.679 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:04.710 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:05.740 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:06.767 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:07.787 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:08.817 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:09.852 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:10.883 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:11.897 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:12.932 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:13.965 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:14.980 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:16.008 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:17.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:18.054 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:19.075 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:20.101 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:21.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:22.126 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:23.145 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:24.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:25.194 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:26.227 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:27.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:28.273 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:29.301 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:30.336 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:31.368 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:32.397 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:33.409 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:34.437 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:35.467 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:36.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:37.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:38.541 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:39.560 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:40.595 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:41.606 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:42.619 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:43.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:44.672 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:45.706 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:46.737 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:47.753 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:48.767 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:49.782 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:50.799 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:51.810 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:52.857 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:53.891 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:54.902 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:55.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:56.972 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:58.084 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:55:59.106 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:00.123 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:01.151 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:02.182 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:03.202 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:04.214 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:05.224 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:06.243 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:07.271 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:08.284 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:09.338 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:10.376 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:11.403 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:12.424 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:13.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:14.470 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:15.489 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:56:52.700 INFO  ---- [tartedMain] [OrderApplication:55] logStarting   Starting OrderApplication using Java 11.0.13 on DESKTOP-MNMB87E with PID 13120 (C:\Users\tkdrb\IdeaProjects\ecommerce\order\build\classes\java\main started by tkdrb in C:\Users\tkdrb\IdeaProjects\ecommerce\order)
2023-12-24 17:56:52.704 INFO  ---- [tartedMain] [OrderApplication:631] logStartupProfileInfo   No active profile set, falling back to 1 default profile: "default"
2023-12-24 17:56:52.818 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-12-24 17:56:52.819 INFO  ---- [tartedMain] [DevToolsPropertyDefaultsPostProcessor:255] logTo   For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-12-24 17:56:54.896 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:56:54.898 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-12-24 17:56:54.969 INFO  ---- [tartedMain] [RepositoryConfigurationExtensionSupport:349] isStrictRepositoryCandidate   Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.example.order.adapter.out.persistence.repository.OrderEntityRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-12-24 17:56:55.021 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 117 ms. Found 0 JDBC repository interfaces.
2023-12-24 17:56:55.039 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:262] multipleStoresDetected   Multiple Spring Data modules found, entering strict repository configuration mode
2023-12-24 17:56:55.039 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:132] registerRepositoriesIn   Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-24 17:56:55.162 INFO  ---- [tartedMain] [RepositoryConfigurationDelegate:201] registerRepositoriesIn   Finished Spring Data repository scanning in 116 ms. Found 1 JPA repository interfaces.
2023-12-24 17:56:55.614 INFO  ---- [tartedMain] [GenericScope:283] setSerializationId   BeanFactory id=980662d1-ab5f-3e08-bd9c-2a10e4bc2b54
2023-12-24 17:56:58.199 INFO  ---- [tartedMain] [TomcatWebServer:108] initialize   Tomcat initialized with port(s): 8084 (http)
2023-12-24 17:56:58.227 INFO  ---- [tartedMain] [StandardService:173] log   Starting service [Tomcat]
2023-12-24 17:56:58.228 INFO  ---- [tartedMain] [StandardEngine:173] log   Starting Servlet engine: [Apache Tomcat/9.0.76]
2023-12-24 17:56:58.472 INFO  ---- [tartedMain] [[/]:173] log   Initializing Spring embedded WebApplicationContext
2023-12-24 17:56:58.474 INFO  ---- [tartedMain] [ServletWebServerApplicationContext:292] prepareWebApplicationContext   Root WebApplicationContext: initialization completed in 5654 ms
2023-12-24 17:56:58.538 INFO  ---- [tartedMain] [HikariDataSource:110] getConnection   HikariPool-1 - Starting...
2023-12-24 17:56:59.022 INFO  ---- [tartedMain] [HikariDataSource:123] getConnection   HikariPool-1 - Start completed.
2023-12-24 17:56:59.039 INFO  ---- [tartedMain] [H2ConsoleAutoConfiguration:98] logDataSources   H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/shoes_order'
2023-12-24 17:56:59.280 INFO  ---- [tartedMain] [LogHelper:31] logPersistenceUnitInformation   HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-24 17:56:59.363 INFO  ---- [tartedMain] [Version:44] logVersion   HHH000412: Hibernate ORM core version 5.6.15.Final
2023-12-24 17:56:59.599 INFO  ---- [tartedMain] [Version:56] <clinit>   HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-12-24 17:56:59.840 INFO  ---- [tartedMain] [Dialect:175] <init>   HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-12-24 17:57:01.459 INFO  ---- [tartedMain] [JtaPlatformInitiator:52] initiateService   HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-24 17:57:01.480 INFO  ---- [tartedMain] [LocalContainerEntityManagerFactoryBean:437] buildNativeEntityManagerFactory   Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-24 17:57:02.199 WARN  ---- [tartedMain] [JpaBaseConfiguration$JpaWebConfiguration:223] openEntityManagerInViewInterceptor   spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-24 17:57:02.279 WARN  ---- [tartedMain] [OptionalLiveReloadServer:62] startServer   Unable to start LiveReload server
2023-12-24 17:57:02.343 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'auth-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:57:02.593 INFO  ---- [tartedMain] [XStreamAutoConfiguration:60] defaultAxonXStream   Initializing an XStream instance since none was found. The auto configuration base packages will be used as wildcards for the XStream security settings.
2023-12-24 17:57:02.776 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [com.example.order].
2023-12-24 17:57:02.776 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.tokenstore.jpa].
2023-12-24 17:57:02.778 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventhandling.deadletter.jpa].
2023-12-24 17:57:02.778 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.modelling.saga.repository.jpa].
2023-12-24 17:57:02.779 INFO  ---- [tartedMain] [XStreamSecurityTypeUtility:56] lambda$autoConfigBasePackages$0   Constructing wildcard type for base package [org.axonframework.eventsourcing.eventstore.jpa].
2023-12-24 17:57:02.793 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.Dom4JToByteArrayConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:57:02.795 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToDom4jConverter] is ignored. It seems to rely on a class that is not available in the class loader: org/dom4j/Document
2023-12-24 17:57:02.797 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.XomToStringConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:57:02.798 INFO  ---- [tartedMain] [ChainingConverter:157] registerConverter   ContentTypeConverter of type [class org.axonframework.serialization.xml.InputStreamToXomConverter] is ignored. It seems to rely on a class that is not available in the class loader: nu/xom/Document
2023-12-24 17:57:02.976 INFO  ---- [tartedMain] [FeignClientFactoryBean:418] getTarget   For 'admin-service' URL not provided. Will try picking an instance via load-balancing.
2023-12-24 17:57:09.392 INFO  ---- [tartedMain] [DiscoveryClientOptionalArgsConfiguration:71] restTemplateDiscoveryClientOptionalArgs   Eureka HTTP Client uses RestTemplate.
2023-12-24 17:57:12.900 WARN  ---- [tartedMain] [LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger:83] logWarning   Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-12-24 17:57:13.242 INFO  ---- [tartedMain] [InstanceInfoFactory:67] create   Setting initial instance status as: STARTING
2023-12-24 17:57:13.531 INFO  ---- [tartedMain] [DiscoveryClient:372] <init>   Initializing Eureka in region us-east-1
2023-12-24 17:57:13.553 INFO  ---- [tartedMain] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 17:57:13.639 INFO  ---- [tartedMain] [DiscoveryClient:1007] fetchRegistry   Disable delta property : false
2023-12-24 17:57:13.641 INFO  ---- [tartedMain] [DiscoveryClient:1008] fetchRegistry   Single vip registry refresh property : null
2023-12-24 17:57:13.641 INFO  ---- [tartedMain] [DiscoveryClient:1009] fetchRegistry   Force full registry fetch : false
2023-12-24 17:57:13.643 INFO  ---- [tartedMain] [DiscoveryClient:1010] fetchRegistry   Application is null : false
2023-12-24 17:57:13.643 INFO  ---- [tartedMain] [DiscoveryClient:1011] fetchRegistry   Registered Applications size is zero : true
2023-12-24 17:57:13.643 INFO  ---- [tartedMain] [DiscoveryClient:1013] fetchRegistry   Application version is -1: true
2023-12-24 17:57:13.643 INFO  ---- [tartedMain] [DiscoveryClient:1097] getAndStoreFullRegistry   Getting all instance registry info from the eureka server
2023-12-24 17:57:14.643 INFO  ---- [tartedMain] [DiscoveryClient:1106] getAndStoreFullRegistry   The response status is 200
2023-12-24 17:57:14.658 INFO  ---- [tartedMain] [DiscoveryClient:1321] initScheduledTasks   Starting heartbeat executor: renew interval is: 30
2023-12-24 17:57:14.671 INFO  ---- [tartedMain] [InstanceInfoReplicator:60] <init>   InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-12-24 17:57:14.693 INFO  ---- [tartedMain] [DiscoveryClient:492] <init>   Discovery Client initialized at timestamp 1703408234690 with initial instances count: 4
2023-12-24 17:57:14.706 INFO  ---- [tartedMain] [EurekaServiceRegistry:41] register   Registering application ORDER-SERVICE with eureka with status UP
2023-12-24 17:57:14.707 INFO  ---- [tartedMain] [DiscoveryClient:1352] notify   Saw local status change event StatusChangeEvent [timestamp=1703408234707, current=UP, previous=STARTING]
2023-12-24 17:57:14.714 INFO  ---- [plicator-0] [DiscoveryClient:873] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084: registering service...
2023-12-24 17:57:14.854 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-order-topic.v1-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = order-topic.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:57:14.896 INFO  ---- [plicator-0] [DiscoveryClient:882] register   DiscoveryClient_ORDER-SERVICE/192.168.0.236:8084 - registration status: 204
2023-12-24 17:57:15.176 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:57:15.177 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:57:15.177 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703408235171
2023-12-24 17:57:15.187 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Subscribed to topic(s): order-topic
2023-12-24 17:57:15.230 INFO  ---- [tartedMain] [ConsumerConfig:376] logAll   ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-rollback-remove-order.v1-2
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = rollback-remove-order.v1
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2023-12-24 17:57:15.246 INFO  ---- [tartedMain] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 17:57:15.247 INFO  ---- [tartedMain] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 17:57:15.249 INFO  ---- [tartedMain] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703408235246
2023-12-24 17:57:15.251 INFO  ---- [tartedMain] [KafkaConsumer:966] subscribe   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Subscribed to topic(s): rollback-remove-order
2023-12-24 17:57:15.298 INFO  ---- [tartedMain] [TomcatWebServer:220] start   Tomcat started on port(s): 8084 (http) with context path ''
2023-12-24 17:57:15.303 INFO  ---- [tartedMain] [EurekaAutoServiceRegistration:144] onApplicationEvent   Updating port to 8084
2023-12-24 17:57:16.298 INFO  ---- [er#0-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Resetting the last seen epoch of partition order-topic-0 to 54 since the associated topicId changed from null to ib1mJqgARzuAvYCkjlzq-A
2023-12-24 17:57:16.298 INFO  ---- [er#1-0-C-1] [Metadata:402] updateLatestMetadata   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Resetting the last seen epoch of partition rollback-remove-order-0 to 15 since the associated topicId changed from null to QHYRxZXpQCCr8rZoLo1x6A
2023-12-24 17:57:16.303 INFO  ---- [er#1-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:57:16.303 INFO  ---- [er#0-0-C-1] [Metadata:287] update   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 17:57:16.306 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Discovered group coordinator 127.0.0.1:9093 (id: 2147483644 rack: null)
2023-12-24 17:57:16.306 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:853] onSuccess   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Discovered group coordinator 127.0.0.1:9092 (id: 2147483645 rack: null)
2023-12-24 17:57:16.315 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:57:16.316 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:57:16.372 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:57:16.372 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:1000] requestRejoin   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Request joining group due to: need to re-join with the given member-id
2023-12-24 17:57:16.373 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] (Re-)joining group
2023-12-24 17:57:16.373 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:535] sendJoinGroupRequest   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] (Re-)joining group
2023-12-24 17:57:19.384 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully joined group with generation Generation{generationId=57, memberId='consumer-rollback-remove-order.v1-2-ef2aafe1-9a65-4913-b33b-bd9b9bd4eda8', protocol='range'}
2023-12-24 17:57:19.393 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Finished assignment for group at generation 57: {consumer-rollback-remove-order.v1-2-ef2aafe1-9a65-4913-b33b-bd9b9bd4eda8=Assignment(partitions=[rollback-remove-order-0])}
2023-12-24 17:57:19.410 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:595] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully joined group with generation Generation{generationId=53, memberId='consumer-order-topic.v1-1-b3d54ca9-04d9-49b6-92a5-c7faffe24cdd', protocol='range'}
2023-12-24 17:57:19.411 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:659] performAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Finished assignment for group at generation 53: {consumer-order-topic.v1-1-b3d54ca9-04d9-49b6-92a5-c7faffe24cdd=Assignment(partitions=[order-topic-0])}
2023-12-24 17:57:19.428 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Successfully synced group in generation Generation{generationId=53, memberId='consumer-order-topic.v1-1-b3d54ca9-04d9-49b6-92a5-c7faffe24cdd', protocol='range'}
2023-12-24 17:57:19.430 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Notifying assignor about the new Assignment(partitions=[order-topic-0])
2023-12-24 17:57:19.431 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:761] handle   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Successfully synced group in generation Generation{generationId=57, memberId='consumer-rollback-remove-order.v1-2-ef2aafe1-9a65-4913-b33b-bd9b9bd4eda8', protocol='range'}
2023-12-24 17:57:19.432 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:280] invokeOnAssignment   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Notifying assignor about the new Assignment(partitions=[rollback-remove-order-0])
2023-12-24 17:57:19.441 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Adding newly assigned partitions: rollback-remove-order-0
2023-12-24 17:57:19.441 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:292] invokePartitionsAssigned   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Adding newly assigned partitions: order-topic-0
2023-12-24 17:57:19.490 INFO  ---- [er#0-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-order-topic.v1-1, groupId=order-topic.v1] Setting offset for partition order-topic-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9093 (id: 3 rack: null)], epoch=54}}
2023-12-24 17:57:19.490 INFO  ---- [er#1-0-C-1] [ConsumerCoordinator:851] refreshCommittedOffsetsIfNeeded   [Consumer clientId=consumer-rollback-remove-order.v1-2, groupId=rollback-remove-order.v1] Setting offset for partition rollback-remove-order-0 to the committed offset FetchPosition{offset=6, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 2 rack: null)], epoch=15}}
2023-12-24 17:57:19.494 INFO  ---- [er#0-0-C-1] [KafkaMessageListenerContainer:292] info   order-topic.v1: partitions assigned: [order-topic-0]
2023-12-24 17:57:19.494 INFO  ---- [er#1-0-C-1] [KafkaMessageListenerContainer:292] info   rollback-remove-order.v1: partitions assigned: [rollback-remove-order-0]
2023-12-24 17:57:19.783 INFO  ---- [tartedMain] [AxonServerManagedChannel:112] connectChannel   Requesting connection details from 127.0.0.1:8124
2023-12-24 17:57:22.760 INFO  ---- [tartedMain] [AxonServerManagedChannel:346] createConnection   Successfully connected to 127.0.0.1:8124
2023-12-24 17:57:22.796 INFO  ---- [tartedMain] [ControlChannelImpl:170] connect   Connected instruction stream for context 'default'. Sending client identification
2023-12-24 17:57:22.835 INFO  ---- [tartedMain] [CommandChannelImpl:190] lambda$doCreateCommandStream$7   CommandChannel for context 'default' connected, 0 command handlers registered
2023-12-24 17:57:22.838 INFO  ---- [tartedMain] [CommandChannelImpl:260] registerCommandHandler   Registered handler for command 'com.example.order.adapter.axon.command.OrderRequestCreateCommand' in context 'default'
2023-12-24 17:57:22.906 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te.segment 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.segment as col_0_0_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:57:22.906 DEBUG ---- [tartedMain] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=?
2023-12-24 17:57:22.944 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        te 
    FROM
        TokenEntry te 
    WHERE
        te.processorName = :processorName 
    ORDER BY
        te.segment ASC */ select
            tokenentry0_.processor_name as processo1_6_,
            tokenentry0_.segment as segment2_6_,
            tokenentry0_.owner as owner3_6_,
            tokenentry0_.timestamp as timestam4_6_,
            tokenentry0_.token as token5_6_,
            tokenentry0_.token_type as token_ty6_6_ 
        from
            token_entry tokenentry0_ 
        where
            tokenentry0_.processor_name=? 
        order by
            tokenentry0_.segment ASC
2023-12-24 17:57:23.009 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:57:23.016 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:57:23.022 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1253] lambda$run$3   Worker assigned to segment Segment[0/0] for processing
2023-12-24 17:57:23.044 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:57:23.045 INFO  ---- [tartedMain] [OrderApplication:61] logStarted   Started OrderApplication in 32.838 seconds (JVM running for 33.73)
2023-12-24 17:57:23.055 INFO  ---- [ocessor]-0] [TrackingEventProcessor:1337] cleanUp   Using current Thread for last segment worker: TrackingSegmentWorker{processor=OrderCreateSagaProcessor, segment=Segment[0/0]}
2023-12-24 17:57:23.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        tokenentry0_.processor_name as processo1_6_0_,
        tokenentry0_.segment as segment2_6_0_,
        tokenentry0_.owner as owner3_6_0_,
        tokenentry0_.timestamp as timestam4_6_0_,
        tokenentry0_.token as token5_6_0_,
        tokenentry0_.token_type as token_ty6_6_0_ 
    from
        token_entry tokenentry0_ 
    where
        tokenentry0_.processor_name=? 
        and tokenentry0_.segment=? for update
            
2023-12-24 17:57:23.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* update
        org.axonframework.eventhandling.tokenstore.jpa.TokenEntry */ update
            token_entry 
        set
            owner=?,
            timestamp=?,
            token=?,
            token_type=? 
        where
            processor_name=? 
            and segment=?
2023-12-24 17:57:23.068 INFO  ---- [ocessor]-0] [TrackingEventProcessor:587] ensureEventStreamOpened   Fetched token: IndexTrackingToken{globalIndex=24} for segment: Segment[0/0]
2023-12-24 17:57:24.154 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:25.168 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:26.183 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:27.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:28.212 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:29.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:30.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:31.264 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:32.296 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:33.313 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:34.337 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:35.357 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:36.372 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:37.402 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:38.433 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:39.466 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:40.494 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:41.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:42.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:43.563 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:44.594 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:45.628 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:46.645 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:47.661 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:48.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:49.712 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:50.731 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:51.747 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:52.763 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:53.777 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:54.813 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:55.833 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:56.863 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:57.879 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:58.895 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:57:59.933 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:00.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:01.976 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:03.009 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:04.025 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:05.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:06.076 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:07.090 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:08.128 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:09.147 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:10.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:11.201 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:12.230 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:13.252 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:14.265 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:15.287 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:16.304 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:17.327 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:18.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:19.373 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:20.394 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:21.423 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:22.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:23.452 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:24.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:25.503 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:26.527 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:27.538 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:28.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:29.601 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:30.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:31.639 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:32.676 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:33.694 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:34.713 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:35.744 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:36.766 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:37.791 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:38.811 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:39.827 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:40.855 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:41.872 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:42.902 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:43.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:44.931 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:45.954 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:46.971 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:47.989 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:49.005 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:50.041 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:51.066 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:52.084 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:53.118 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:54.132 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:55.148 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:56.166 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:57.183 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:58.197 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:58:59.225 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:00.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:01.273 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:02.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:03.321 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:04.343 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:05.376 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:06.396 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:07.419 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:08.440 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:09.475 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:10.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:11.530 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:12.548 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:13.577 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:14.602 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:15.625 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:16.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:17.670 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:18.681 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:19.703 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:20.718 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:21.748 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:22.766 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:23.797 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:24.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:25.848 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:26.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:27.898 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:28.912 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:29.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:30.943 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:31.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:32.983 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:33.999 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:35.028 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:36.036 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:37.055 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:38.071 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:39.101 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:40.131 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:41.144 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:42.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:43.178 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:44.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:45.232 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:46.255 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:47.274 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:48.305 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:49.325 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:50.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:51.389 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:52.404 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:53.419 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:54.451 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:55.466 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:56.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:57.510 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:58.542 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 17:59:59.566 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:00.588 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:01.606 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:02.620 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:03.644 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:04.677 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:05.699 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:06.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:07.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:08.785 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:09.799 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:10.833 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:11.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:12.879 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:13.895 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:14.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:15.949 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:16.973 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:17.991 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:19.023 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:20.059 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:21.093 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:22.107 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:23.140 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:24.160 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:25.195 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:26.214 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:27.237 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:28.274 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:29.288 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:30.309 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:31.340 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:32.374 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:33.445 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:34.483 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:35.500 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:36.519 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:37.537 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:38.566 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:39.588 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:40.614 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:41.626 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:42.637 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:43.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:44.675 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:45.697 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:46.709 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:47.733 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:48.746 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:49.774 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:50.790 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:51.800 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:52.810 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:53.819 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:54.831 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:55.856 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:56.883 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:57.909 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:58.922 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:00:59.948 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:00.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:01.984 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:02.995 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:04.011 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:05.021 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:06.046 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:07.051 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:08.082 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:08.388 INFO  ---- [084-exec-3] [[/]:173] log   Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-12-24 18:01:08.389 INFO  ---- [084-exec-3] [DispatcherServlet:525] initServletBean   Initializing Servlet 'dispatcherServlet'
2023-12-24 18:01:08.393 INFO  ---- [084-exec-3] [DispatcherServlet:547] initServletBean   Completed initialization in 3 ms
2023-12-24 18:01:08.678 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 18:01:08.687 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 18:01:08.691 DEBUG ---- [executor-2] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 18:01:08.695 DEBUG ---- [executor-2] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 18:01:08.700 INFO  ---- [ocessor]-0] [OrderCreateSaga:42] handle   RegisterOrderCreatedEvent Start Saga
2023-12-24 18:01:08.706 DEBUG ---- [executor-2] [SQL:144] logStatement   
    /* insert com.example.order.adapter.out.persistence.entity.OrderEntity
        */ insert 
        into
            tb_order
            (address, amount, color_id, create_at, payment, product_id, size_id, status, update_at, user_id, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-12-24 18:01:08.731 INFO  ---- [executor-2] [ProducerConfig:376] logAll   ProducerConfig values: 
	acks = -1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2023-12-24 18:01:08.747 INFO  ---- [executor-2] [KafkaProducer:572] configureTransactionState   [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-12-24 18:01:08.767 INFO  ---- [executor-2] [AppInfoParser:119] <init>   Kafka version: 3.1.2
2023-12-24 18:01:08.768 INFO  ---- [executor-2] [AppInfoParser:120] <init>   Kafka commitId: f8c67dc3ae0a3265
2023-12-24 18:01:08.768 INFO  ---- [executor-2] [AppInfoParser:121] <init>   Kafka startTimeMs: 1703408468767
2023-12-24 18:01:08.794 INFO  ---- [producer-1] [Metadata:402] updateLatestMetadata   [Producer clientId=producer-1] Resetting the last seen epoch of partition create-order-0 to 30 since the associated topicId changed from null to UKbrtsGZRhaeZ_6w1VMCTg
2023-12-24 18:01:08.794 INFO  ---- [producer-1] [Metadata:287] update   [Producer clientId=producer-1] Cluster ID: 5_U1uds-SGaR4vItj-jqUw
2023-12-24 18:01:08.796 INFO  ---- [producer-1] [TransactionManager:554] setProducerIdAndEpoch   [Producer clientId=producer-1] ProducerId set to 10010 with epoch 0
2023-12-24 18:01:09.181 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 18:01:09.183 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 18:01:09.187 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 18:01:09.189 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 18:01:09.193 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.SagaEntry
        */ insert 
        into
            saga_entry
            (revision, saga_type, serialized_saga, saga_id) 
        values
            (?, ?, ?, ?)
2023-12-24 18:01:09.196 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 18:01:09.198 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 18:01:09.410 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 18:01:09.414 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 18:01:09.418 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        new org.axonframework.modelling.saga.repository.jpa.SerializedSaga(se.serializedSaga,
        se.sagaType,
        se.revision) 
    FROM
        SagaEntry se 
    WHERE
        se.sagaId = :sagaId */ select
            sagaentry0_.serialized_saga as col_0_0_,
            sagaentry0_.saga_type as col_1_0_,
            sagaentry0_.revision as col_2_0_ 
        from
            saga_entry sagaentry0_ 
        where
            sagaentry0_.saga_id=? limit ?
2023-12-24 18:01:09.422 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.sagaType = :sagaType 
        AND ae.sagaId = :sagaId */ select
            associatio0_.id as id1_0_,
            associatio0_.association_key as associat2_0_,
            associatio0_.association_value as associat3_0_,
            associatio0_.saga_id as saga_id4_0_,
            associatio0_.saga_type as saga_typ5_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.saga_type=? 
            and associatio0_.saga_id=?
2023-12-24 18:01:09.425 INFO  ---- [executor-2] [OrderCreateSaga:70] lambda$handle$0   CheckRegisteredMemberCommand Command success
2023-12-24 18:01:09.444 INFO  ---- [ocessor]-0] [OrderCreateSaga:78] handle   CheckedRegisteredBankAccountEvent saga: CheckRegisteredMemberEvent(memberId=2, createOrderId=75db65f9-11e5-431a-b8a7-d81fe81c4034, checkRegisteredMemberId=2794ce9f-2e45-40f4-b485-350788b14997, productId=1, sizeId=3, amount=5, payment=13333, address=null, status=true)
2023-12-24 18:01:09.444 INFO  ---- [ocessor]-0] [OrderCreateSaga:81] handle   CheckedRegisteredBankAccountEvent event success
2023-12-24 18:01:09.964 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        SagaEntry s 
    SET
        s.serializedSaga = :serializedSaga,
        s.revision = :revision 
    WHERE
        s.sagaId = :sagaId */ update
            saga_entry 
        set
            serialized_saga=?,
            revision=? 
        where
            saga_id=?
2023-12-24 18:01:09.967 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    select
        next_val as id_val 
    from
        hibernate_sequence for update
            
2023-12-24 18:01:09.970 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    update
        hibernate_sequence 
    set
        next_val= ? 
    where
        next_val=?
2023-12-24 18:01:09.982 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* insert org.axonframework.modelling.saga.repository.jpa.AssociationValueEntry
        */ insert 
        into
            association_value_entry
            (association_key, association_value, saga_id, saga_type, id) 
        values
            (?, ?, ?, ?, ?)
2023-12-24 18:01:10.201 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.token = :token,
        te.tokenType = :tokenType,
        te.timestamp = :timestamp 
    WHERE
        te.owner = :owner 
        AND te.processorName = :processorName 
        AND te.segment = :segment */ update
            token_entry 
        set
            token=?,
            token_type=?,
            timestamp=? 
        where
            owner=? 
            and processor_name=? 
            and segment=?
2023-12-24 18:01:10.207 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae.sagaId 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.associationKey = :associationKey 
        AND ae.associationValue = :associationValue 
        AND ae.sagaType = :sagaType */ select
            associatio0_.saga_id as col_0_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.association_key=? 
            and associatio0_.association_value=? 
            and associatio0_.saga_type=?
2023-12-24 18:01:10.210 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        new org.axonframework.modelling.saga.repository.jpa.SerializedSaga(se.serializedSaga,
        se.sagaType,
        se.revision) 
    FROM
        SagaEntry se 
    WHERE
        se.sagaId = :sagaId */ select
            sagaentry0_.serialized_saga as col_0_0_,
            sagaentry0_.saga_type as col_1_0_,
            sagaentry0_.revision as col_2_0_ 
        from
            saga_entry sagaentry0_ 
        where
            sagaentry0_.saga_id=? limit ?
2023-12-24 18:01:10.212 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* SELECT
        ae 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.sagaType = :sagaType 
        AND ae.sagaId = :sagaId */ select
            associatio0_.id as id1_0_,
            associatio0_.association_key as associat2_0_,
            associatio0_.association_value as associat3_0_,
            associatio0_.saga_id as saga_id4_0_,
            associatio0_.saga_type as saga_typ5_0_ 
        from
            association_value_entry associatio0_ 
        where
            associatio0_.saga_type=? 
            and associatio0_.saga_id=?
2023-12-24 18:01:10.221 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* DELETE 
    FROM
        AssociationValueEntry ae 
    WHERE
        ae.sagaId = :sagaId */ delete 
        from
            association_value_entry 
        where
            saga_id=?
2023-12-24 18:01:10.224 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* DELETE 
    FROM
        SagaEntry se 
    WHERE
        se.sagaId = :id */ delete 
        from
            saga_entry 
        where
            saga_id=?
2023-12-24 18:01:10.294 INFO  ---- [executor-2] [OrderCreateSaga:106] lambda$handle$1   CheckRegisteredProductCommand Command success
2023-12-24 18:01:11.255 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:12.273 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:13.291 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:14.320 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:15.346 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:16.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:17.367 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:18.384 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:19.401 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:20.429 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:21.457 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:22.469 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:23.482 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:24.509 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:25.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:26.531 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:27.543 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:28.557 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:29.582 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:30.593 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:31.609 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:32.637 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:33.654 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:34.679 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:35.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:36.721 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:37.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:38.747 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:39.773 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:40.799 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:41.832 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:42.858 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:43.866 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:44.894 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:45.920 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:46.946 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:47.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:48.967 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:49.981 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:51.008 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:52.031 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:53.059 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:54.083 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:55.094 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:56.101 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:57.127 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:58.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:01:59.162 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:00.176 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:01.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:02.230 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:03.243 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:04.255 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:05.300 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:06.317 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:07.345 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:08.360 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:09.385 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:10.395 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:11.407 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:12.416 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:13.443 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:13.657 INFO  ---- [executor-0] [ConfigClusterResolver:43] getClusterEndpoints   Resolving eureka endpoints via configuration
2023-12-24 18:02:14.471 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:15.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:16.508 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:17.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:18.527 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:19.556 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:20.583 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:21.612 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:22.639 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:23.646 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:24.655 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:25.669 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:26.674 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:27.684 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:28.708 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:29.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:30.757 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:31.768 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:32.792 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:33.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:34.845 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:35.868 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:36.892 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:37.915 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:38.934 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:39.954 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:40.976 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:42.001 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:43.026 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:44.049 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:45.068 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:46.097 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:47.126 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:48.152 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:49.182 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:50.209 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:51.238 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:52.261 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:53.276 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:54.306 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:55.330 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:56.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:57.382 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:58.408 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:02:59.426 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:00.454 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:01.480 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:02.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:03.496 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:04.517 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:05.524 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:06.534 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:07.549 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:08.574 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:09.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:10.626 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:11.654 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:12.676 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:13.699 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:14.723 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:15.751 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:16.766 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:17.781 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:18.789 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:19.816 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:20.843 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:21.852 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:22.864 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:23.877 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:24.889 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:25.918 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:26.930 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:27.943 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:29.058 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:30.073 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:31.082 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:32.092 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:33.105 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:34.112 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:35.128 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:36.137 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:37.163 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:38.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:39.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:40.235 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:41.247 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:42.257 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:43.286 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:44.302 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:45.330 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:46.359 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:47.389 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:48.409 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:49.438 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:50.464 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:51.478 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:52.491 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:53.511 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:54.520 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:55.536 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:56.562 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:57.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:58.603 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:03:59.629 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:00.653 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:01.683 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:02.698 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:03.715 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:04.726 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:05.743 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:06.770 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:07.802 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:08.818 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:09.846 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:10.874 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:11.884 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:12.903 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:13.929 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:14.956 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:15.985 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:17.001 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:18.012 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:19.042 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:20.060 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:21.086 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:22.099 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:23.115 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:24.142 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:25.155 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:26.180 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:27.205 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:28.216 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:29.229 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:30.258 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:31.287 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:32.314 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:33.342 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:34.358 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:35.386 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:36.415 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:37.430 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:38.459 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:39.486 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:40.501 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:41.516 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:42.528 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:43.554 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:44.562 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:45.591 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:46.599 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:47.626 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:48.640 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:49.668 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:50.680 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:51.705 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:52.724 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:53.752 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:54.765 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:55.778 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:56.803 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:57.849 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:58.857 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:04:59.878 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:00.906 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:01.923 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:02.934 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:03.963 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:04.988 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:06.016 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:07.025 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:08.041 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:09.063 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:10.092 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:11.099 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:12.110 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:13.136 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:14.144 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:15.159 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:16.171 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:17.184 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:18.199 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:19.228 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:20.251 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:21.266 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:22.295 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:23.310 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:24.339 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:25.363 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:26.390 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:27.405 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:28.417 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:29.428 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:30.458 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:31.485 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:32.497 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:33.515 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:34.545 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:35.573 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:36.600 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:37.623 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:38.651 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:39.665 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:40.692 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:41.708 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:42.723 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:43.732 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:44.745 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:45.770 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:46.783 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:47.810 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:48.825 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:49.853 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
2023-12-24 18:05:50.874 DEBUG ---- [ocessor]-0] [SQL:144] logStatement   
    /* UPDATE
        TokenEntry te 
    SET
        te.timestamp = :timestamp 
    WHERE
        te.processorName = :processorName 
        AND te.segment = :segment 
        AND te.owner = :owner */ update
            token_entry 
        set
            timestamp=? 
        where
            processor_name=? 
            and segment=? 
            and owner=?
